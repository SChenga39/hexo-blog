<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SChenga&#39;s blog</title>
  
  
  <link href="https://schenga39.github.io/hexo-blog/atom.xml" rel="self"/>
  
  <link href="https://schenga39.github.io/hexo-blog/"/>
  <updated>2025-07-24T07:27:31.323Z</updated>
  <id>https://schenga39.github.io/hexo-blog/</id>
  
  <author>
    <name>SChenga</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux Wine 使用指南</title>
    <link href="https://schenga39.github.io/hexo-blog/2023/10/07/Linux-Wine-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>https://schenga39.github.io/hexo-blog/2023/10/07/Linux-Wine-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</id>
    <published>2023-10-07T16:00:00.000Z</published>
    <updated>2025-07-24T07:27:31.323Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Wine-是什么"><a href="#Wine-是什么" class="headerlink" title="Wine 是什么"></a>Wine 是什么</h2><blockquote><p>Wine is a compatibility layer capable of running Microsoft Windows applications on Unix-like operating systems. Programs running in Wine act as native programs would, without the performance&#x2F;memory penalties of an emulator.</p></blockquote><p>简单来说，Wine 可以让你在 Linux 系统上无缝运行 Windows 下的应用程序，而且相比于虚拟机可以获得更好的性能。</p><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><p>首先确保你使用的是 X11 桌面，已知 Wayland 桌面环境有兼容性问题。</p><p>输入以下命令安装 Wine 以及相关组件：</p><div class="code-wrapper"><pre><code class="hljs bash">sudo pacman -S wine wine-mono wine_gecko wine-staging giflib lib32-giflib libpng lib32-libpng libldap lib32-libldap gnutls lib32-gnutls \    mpg123 lib32-mpg123 openal lib32-openal v4l-utils lib32-v4l-utils libpulse lib32-libpulse libgpg-error \    lib32-libgpg-error alsa-plugins lib32-alsa-plugins alsa-lib lib32-alsa-lib libjpeg-turbo lib32-libjpeg-turbo \    sqlite lib32-sqlite libxcomposite lib32-libxcomposite libxinerama lib32-libgcrypt libgcrypt lib32-libxinerama \    ncurses lib32-ncurses opencl-icd-loader lib32-opencl-icd-loader libxslt lib32-libxslt libva lib32-libva gtk3 \    lib32-gtk3 gst-plugins-base-libs lib32-gst-plugins-base-libs vulkan-icd-loader lib32-vulkan-icd-loader</code></pre></div><p>一般来说，安装完 Wine 之后直接双击 exe 程序即可运行。但是有些应用可能在 64 位 Wine 下无法运行，此时就需要手动切换到 32 位 Wine 环境：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 设置架构为 win32，配置文件保存在 `~/.win32` 目录下</span><span class="hljs-comment"># 打开 Wine 配置界面</span>WINEARCH=win32 WINEPREFIX=~/.win32 winecfg<span class="hljs-comment"># 运行程序</span>WINEARCH=win32 WINEPREFIX=~/.win32 wine /path/to/program.exe</code></pre></div><p>如果你需要运行 GalGame，则可能需要执行以下命令安装额外组件：</p><div class="code-wrapper"><pre><code class="hljs bash">sudo pacman -S winetricks d3dx9 quartz devenum wmp10 gdiplus dotnet40 ffdshow cjkfonts</code></pre></div><h2 id="Wine-前缀管理"><a href="#Wine-前缀管理" class="headerlink" title="Wine 前缀管理"></a>Wine 前缀管理</h2><p>一般来说，可以为每个软件新建一个 Wine 环境，使用单独的配置运行每个 exe 程序，这时候就需要进行前缀管理。</p><p>我在 <code>~/.zshrc</code> 文件中配置了默认使用的 Wine 前缀和架构如下：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> WINEARCH=win32<span class="hljs-built_in">export</span> WINEPREFIX=~/.win32</code></pre></div><p>这样就不用每次执行 exe 时都要在前面加上 WINEARCH 参数了。</p><p>此外，还可以为每个 exe 文件编写运行脚本，一键运行：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span>WINEARCH=win32WINEPREFIX=~/.win32wine /home/username/.win32/drive_c/altera/13.0sp1/quartus/bin/quartus.exe</code></pre></div><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://wiki.archlinux.org/title/Wine">Wine - ArchWiki</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Wine-是什么&quot;&gt;&lt;a href=&quot;#Wine-是什么&quot; class=&quot;headerlink&quot; title=&quot;Wine 是什么&quot;&gt;&lt;/a&gt;Wine 是什么&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Wine is a compatibility layer cap</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://schenga39.github.io/hexo-blog/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Arch Linux 安装全过程</title>
    <link href="https://schenga39.github.io/hexo-blog/2023/09/27/Arch-Linux-%E5%AE%89%E8%A3%85%E5%85%A8%E8%BF%87%E7%A8%8B/"/>
    <id>https://schenga39.github.io/hexo-blog/2023/09/27/Arch-Linux-%E5%AE%89%E8%A3%85%E5%85%A8%E8%BF%87%E7%A8%8B/</id>
    <published>2023-09-27T16:00:00.000Z</published>
    <updated>2025-07-24T07:27:31.323Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么离开-Windows"><a href="#为什么离开-Windows" class="headerlink" title="为什么离开 Windows"></a>为什么离开 Windows</h2><ol><li>微软的监控</li><li>盗版的风险</li></ol><h2 id="安装完整步骤"><a href="#安装完整步骤" class="headerlink" title="安装完整步骤"></a>安装完整步骤</h2><ol><li><p>下载 Arch Linux iso 镜像文件</p><ul><li>使用 <a href="https://mirrors.ustc.edu.cn/archlinux/iso/2023.09.01/archlinux-2023.09.01-x86_64.iso">中科大镜像</a></li></ul></li><li><p>下载 Rufus 刻录软件</p></li><li><p>写入镜像到 U 盘</p></li><li><p>开机狂按 Del 键进入 BIOS，关闭安全启动</p></li><li><p>开机狂按 F11 进入引导项，选择 U 盘</p></li><li><p>在启动选择界面选择第一项：<code>Arch Linux install medium (x86_64, UEFI)</code></p></li><li><p>依次执行以下命令</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 禁用 reflector 服务</span>systemctl stop reflector.service<span class="hljs-comment"># 检查 reflector 服务是否被关闭</span>systemctl status reflector.service<span class="hljs-comment"># 确认当前是否运行在 UEFI 模式</span><span class="hljs-comment"># 如果出现一堆东西已在 UEFI 模式，否则需要确认启动方式是否为 UEFI</span><span class="hljs-built_in">ls</span> /sys/firmware/efi/efivars<span class="hljs-comment"># 连接网络: 使用无线连接才需要进行以下步骤</span>iwctl <span class="hljs-comment"># 进入交互式命令行</span>device list <span class="hljs-comment"># 列出无线网卡设备名，比如无线网卡看到叫 wlan0</span>station wlan0 scan <span class="hljs-comment"># 扫描网络</span>station wlan0 get-networks <span class="hljs-comment"># 列出所有 wifi 网络</span>station wlan0 connect wifi-name <span class="hljs-comment"># 进行连接，注意这里无法输入中文。回车后输入密码即可</span><span class="hljs-built_in">exit</span> <span class="hljs-comment"># 连接成功后退出</span><span class="hljs-comment"># 测试网络连通性</span>ping www.bilibili.com<span class="hljs-comment"># 更新系统时钟</span><span class="hljs-comment"># 这步很重要，关系到后面 pgp 密钥环更新环节</span>timedatectl set-ntp <span class="hljs-literal">true</span> <span class="hljs-comment"># 将系统时间与网络时间进行同步</span>timedatectl status <span class="hljs-comment"># 检查服务状态</span><span class="hljs-comment"># 修改镜像源为国内，加快下载速度</span><span class="hljs-comment"># 推荐使用中科大源和清华源</span>vim /etc/pacman.d/mirrorlist<span class="hljs-comment"># =========================</span>Server = https://mirrors.ustc.edu.cn/archlinux/<span class="hljs-variable">$repo</span>/os/<span class="hljs-variable">$arch</span> <span class="hljs-comment"># 中国科学技术大学开源镜像站</span>Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/<span class="hljs-variable">$repo</span>/os/<span class="hljs-variable">$arch</span> <span class="hljs-comment"># 清华大学开源软件镜像站</span><span class="hljs-comment"># =========================</span><span class="hljs-comment"># 分区和格式化</span>lsblk <span class="hljs-comment"># 显示当前分区情况</span><span class="hljs-comment"># 使用 cfdisk 对磁盘分区</span>cfdisk /dev/nvme0n1<span class="hljs-comment"># 如果不再使用 Windows，则抹掉硬盘上原来的文件系统</span>wipefs --all /dev/nvme0n1<span class="hljs-comment"># 创建三个分区: EFI、Swap 和主分区</span><span class="hljs-comment"># EFI: 512M, Swap: 14G, 剩下的给主分区</span><span class="hljs-comment"># 分区完成后查看磁盘情况</span>lsblk<span class="hljs-comment"># 下面假设</span><span class="hljs-comment"># EFI: /dev/nvme0n1p1</span><span class="hljs-comment"># Swap: /dev/nvme0n1p2</span><span class="hljs-comment"># 主分区: /dev/nvme0n1p3</span><span class="hljs-comment"># 格式化 Swap 分区</span>mkswap /dev/nvme0n1p2<span class="hljs-comment"># 使用 Btrfs 格式化主分区</span>mkfs.btrfs -L myArch /dev/nvme0n1p3<span class="hljs-comment"># 将主分区挂载以创建子卷</span>mount -t btrfs -o compress=zstd /dev/nvme0n1p3 /mnt<span class="hljs-comment"># 查看挂载情况</span><span class="hljs-built_in">df</span> -h<span class="hljs-comment"># 创建 / 目录子卷</span>btrfs subvolume create /mnt/@<span class="hljs-comment"># 创建 /home 目录子卷</span>btrfs subvolume create /mnt/@home<span class="hljs-comment"># 查看子卷情况</span>btrfs subvolume list -p /mnt<span class="hljs-comment"># 卸载主分区以挂载子卷</span>umount /mnt<span class="hljs-comment"># 挂载子卷 (请务必依次执行下列命令)</span>mount -t btrfs -o subvol=/@,compress=zstd /dev/nvme0n1p3 /mnt <span class="hljs-comment"># 挂载 / 目录</span><span class="hljs-built_in">mkdir</span> /mnt/home <span class="hljs-comment"># 创建 /home 目录</span>mount -t btrfs -o subvol=/@home,compress=zstd /dev/nvme0n1p3 /mnt/home <span class="hljs-comment"># 挂载 /home 目录</span><span class="hljs-built_in">mkdir</span> -p /mnt/boot/efi <span class="hljs-comment"># 创建 /boot/efi 目录</span>mount /dev/nvme0n1p1 /mnt/boot/efi <span class="hljs-comment"># 挂载 /boot/efi 目录</span>swapon /dev/nvme0n1p2 <span class="hljs-comment"># 挂载交换分区</span><span class="hljs-comment"># 查看挂载情况</span><span class="hljs-built_in">df</span> -h<span class="hljs-comment"># 查看 Swap 分区挂载情况</span>free -h<span class="hljs-comment"># 安装系统</span>pacstrap /mnt base base-devel linux linux-firmware btrfs-progs<span class="hljs-comment"># 安装其他必要的功能性软件</span>pacstrap /mnt dhcpcd networkmanager vim sudo zsh zsh-completions<span class="hljs-comment"># 生成 fstab 文件</span>genfstab -U /mnt &gt; /mnt/etc/fstab<span class="hljs-comment"># 查看 /mnt/etc/fstab 确保没有错误</span><span class="hljs-built_in">cat</span> /mnt/etc/fstab<span class="hljs-comment"># 将系统环境切换到新系统下</span>arch-chroot /mnt<span class="hljs-comment"># 设置主机名与分区</span>vim /etc/hostname<span class="hljs-comment"># 设置 hosts</span>vim /etc/hosts<span class="hljs-comment"># =========================</span>127.0.0.1   localhost::1         localhost127.0.1.1   myarch.localdomain  myarch<span class="hljs-comment"># =========================</span><span class="hljs-comment"># 设置时区</span><span class="hljs-built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<span class="hljs-comment"># 将系统时间同步到硬件</span>hwclock --systohc<span class="hljs-comment"># 设置 Locale</span>vim /etc/locale.gen<span class="hljs-comment"># 去掉 `en_US.UTF-8 UTF-8` 以及 `zh_CN.UTF-8 UTF-8` 行前的注释符号</span><span class="hljs-comment"># 生成 locale</span>locale-gen<span class="hljs-comment"># 向 /etc/locale.conf 添加内容</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;LANG=en_US.UTF-8&#x27;</span>  &gt; /etc/locale.conf<span class="hljs-comment"># 为 root 用户设置密码</span>passwd root<span class="hljs-comment"># 安装芯片制造商的微码</span>pacman -S intel-ucode <span class="hljs-comment"># Intel</span>pacman -S amd-ucode <span class="hljs-comment"># AMD</span><span class="hljs-comment"># 安装引导程序</span>pacman -S grub efibootmgr os-probergrub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=ARCH<span class="hljs-comment"># 编辑 GRUB 文件</span>vim /etc/default/grub<span class="hljs-comment"># =========================</span><span class="hljs-comment"># 去掉 GRUB_CMDLINE_LINUX_DEFAULT 一行中最后的 quiet 参数</span><span class="hljs-comment"># 把 loglevel 的数值从 3 改成 5，为了后续出现系统错误时方便排错</span><span class="hljs-comment"># 加入 nowatchdog 参数，显著提高开关机速度</span>GRUB_CMDLINE_LINUX_DEFAULT=<span class="hljs-string">&quot;loglevel=5 nowatchdog&quot;</span><span class="hljs-comment"># =========================</span><span class="hljs-comment"># 如果需要引导 Windows 10 则需要再加一行</span>GRUB_DISABLE_OS_PROBER=<span class="hljs-literal">false</span><span class="hljs-comment"># =========================</span><span class="hljs-comment"># 生成 GRUB 所需的配置文件</span>grub-mkconfig -o /boot/grub/grub.cfg<span class="hljs-comment"># 完成安装, 这个时候拔掉 U 盘</span><span class="hljs-built_in">exit</span> <span class="hljs-comment"># 退回安装环境</span>umount -R /mnt <span class="hljs-comment"># 卸载新分区</span>reboot <span class="hljs-comment"># 重启</span></code></pre></div></li><li><p>重启后使用 root 和密码登录 Linux 并执行以下命令</p><div class="code-wrapper"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> --now NetworkManager <span class="hljs-comment"># 设置开机自启并立即启动 NetworkManager 服务</span>ping www.bilibili.com <span class="hljs-comment"># 测试网络连接</span><span class="hljs-comment"># 若使用无线连接则先连接网络</span>nmcli dev wifi list <span class="hljs-comment"># 显示附近的 Wi-Fi 网络</span>nmcli dev wifi connect <span class="hljs-string">&quot;Wi-Fi名（SSID）&quot;</span> password <span class="hljs-string">&quot;网络密码&quot;</span> <span class="hljs-comment"># 连接指定的无线网络</span><span class="hljs-comment"># 安装 neofetch</span>pacman -S neofetch<span class="hljs-comment"># 使用 neofetch 打印系统信息</span>neofetch<span class="hljs-comment"># 关机</span>shutdown -h now</code></pre></div></li><li><p>至此，无图形界面的 archlinux 已安装完成</p></li></ol><h2 id="图形界面安装和配置"><a href="#图形界面安装和配置" class="headerlink" title="图形界面安装和配置"></a>图形界面安装和配置</h2><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 确保当前系统为最新</span>pacman -Syyu<span class="hljs-comment"># 配置 root 账户默认编辑器</span>vim ~/.bash_profile<span class="hljs-comment"># 添加以下内容</span><span class="hljs-comment"># =========================</span><span class="hljs-built_in">export</span> EDITOR=<span class="hljs-string">&#x27;vim&#x27;</span><span class="hljs-comment"># =========================</span><span class="hljs-comment"># 准备非 Root 用户</span>useradd -m -G wheel -s /bin/bash myusername<span class="hljs-comment"># 设置新用户的密码</span>passwd myusername<span class="hljs-comment"># 同意新用户使用 sudo</span>vim /etc/sudoers<span class="hljs-comment"># 找到下面一行并把前面的 `#` 去掉</span><span class="hljs-comment"># =========================</span><span class="hljs-comment">#%wheel ALL=(ALL) ALL</span><span class="hljs-comment"># =========================</span><span class="hljs-comment"># 开启 32位支持库和Arch Linux 中文社区仓库</span>vim /etc/pacman.conf<span class="hljs-comment"># 去掉 `[multilib]` 一节中的两行注释</span><span class="hljs-comment"># 在末尾添加如下内容</span><span class="hljs-comment"># =========================</span>[archlinuxcn]Server = https://mirrors.ustc.edu.cn/archlinuxcn/<span class="hljs-variable">$arch</span> <span class="hljs-comment"># 中国科学技术大学开源镜像站</span>Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/<span class="hljs-variable">$arch</span> <span class="hljs-comment"># 清华大学开源软件镜像站</span><span class="hljs-comment"># =========================</span><span class="hljs-comment"># 再次更新系统</span>pacman -Syyu<span class="hljs-comment"># 安装 KDE Plasma 桌面环境</span>pacman -S plasma-meta konsole dolphin<span class="hljs-comment"># (可选) 安装 wayland</span>pacman -S  plasma-wayland-session xdg-desktop-portal<span class="hljs-comment"># 配置并启动欢迎屏幕</span>systemctl <span class="hljs-built_in">enable</span> --now sddm<span class="hljs-comment"># 输入新用户密码即可登录桌面</span></code></pre></div><h2 id="图形界面的后续配置"><a href="#图形界面的后续配置" class="headerlink" title="图形界面的后续配置"></a>图形界面的后续配置</h2><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 测试桌面环境网络连通性</span>ping www.bilibili.com<span class="hljs-comment"># 安装基础功能包</span>sudo pacman -S ntfs-3g <span class="hljs-comment"># 使系统可以识别 NTFS 格式的硬盘</span>sudo pacman -S adobe-source-han-serif-cn-fonts wqy-zenhei <span class="hljs-comment"># 安装几个开源中文字体。一般装上文泉驿就能解决大多 wine 应用中文方块的问题</span>sudo pacman -S noto-fonts noto-fonts-cjk noto-fonts-emoji noto-fonts-extra <span class="hljs-comment"># 安装谷歌开源字体及表情</span>sudo pacman -S firefox chromium <span class="hljs-comment"># 安装常用的火狐、chromium 浏览器</span>sudo pacman -S ark <span class="hljs-comment"># 压缩软件。在 dolphin 中可用右键解压压缩包</span>sudo pacman -S packagekit-qt5 packagekit appstream-qt appstream <span class="hljs-comment"># 确保 Discover（软件中心）可用，需重启</span>sudo pacman -S gwenview <span class="hljs-comment"># 图片查看器</span>sudo pacman -S steam <span class="hljs-comment"># 游戏商店。稍后看完显卡驱动章节再使用</span>sudo pacman -S archlinuxcn-keyring <span class="hljs-comment"># cn 源中的签名（archlinuxcn-keyring 在 archlinuxcn）</span>sudo pacman -S yay <span class="hljs-comment"># yay 命令可以让用户安装 AUR 中的软件（yay 在 archlinuxcn）</span><span class="hljs-comment"># 检查家目录下常见目录是否创建, 若未创建则需要手动创建</span><span class="hljs-built_in">cd</span> ~<span class="hljs-built_in">ls</span> -hl<span class="hljs-built_in">mkdir</span> Desktop Documents Downloads Music Pictures Videos</code></pre></div><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="出现-PGP-signature-Error"><a href="#出现-PGP-signature-Error" class="headerlink" title="出现 PGP signature Error"></a>出现 PGP signature Error</h3><div class="code-wrapper"><pre><code class="hljs bash">pacman-key --initpacman-key --populatepacman -S archlinux-keyring</code></pre></div><h3 id="显卡驱动问题"><a href="#显卡驱动问题" class="headerlink" title="显卡驱动问题"></a>显卡驱动问题</h3><p>NVIDIA 驱动未正常运行，具体现象为按步骤完成安装并进入桌面后打开应用很慢，且在终端执行 <code>nvtop</code> 显示无法找到显卡</p><p>经过排查后发现是由于 Linux 系统自带的 nouveau 比 NVIDIA 官方驱动更早启动，导致 NVIDIA 驱动无法正常运行。</p><p>解决方法如下</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 查看启动时系统内核输出消息</span>sudo dmesg<span class="hljs-comment"># 禁用 Linux 自带的 nouveau 显卡驱动</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;blacklist nouveau&#x27;</span> &gt; /etc/modprobe.d/blacklist-nvidia-nouveau.conf<span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;options nouveau modeset=0&#x27;</span> &gt;&gt; /etc/modprobe.d/blacklist-nvidia-nouveau.conf<span class="hljs-comment"># 重新制作镜像</span>sudo mkinitcpio -p linux</code></pre></div><h3 id="蓝牙耳机无法连接"><a href="#蓝牙耳机无法连接" class="headerlink" title="蓝牙耳机无法连接"></a>蓝牙耳机无法连接</h3><div class="code-wrapper"><pre><code class="hljs bash">sudo pacman -S pulseaudiosudo pacman -S pulseaudio-bluetooth</code></pre></div><h3 id="Dolphin-预览-avif-格式的图片-2"><a href="#Dolphin-预览-avif-格式的图片-2" class="headerlink" title="Dolphin 预览 avif 格式的图片 2"></a>Dolphin 预览 avif 格式的图片 2</h3><div class="code-wrapper"><pre><code class="hljs bash">sudo pacman -S kimageformatssudo pacman -S shared-mime-infosudo pacman -S libavif</code></pre></div><h3 id="crontab-报错：-usr-bin-vi-exited-with-status-127"><a href="#crontab-报错：-usr-bin-vi-exited-with-status-127" class="headerlink" title="crontab 报错：&quot;/usr/bin/vi&quot; exited with status 127"></a>crontab 报错：<code>&quot;/usr/bin/vi&quot; exited with status 127</code></h3><div class="code-wrapper"><pre><code class="hljs bash">sudo vim ~/.profile<span class="hljs-comment"># ========================================</span>EDITOR=<span class="hljs-string">&#x27;/bin/vim&#x27;</span>VISUAL=<span class="hljs-string">&#x27;/bin/vim&#x27;</span><span class="hljs-built_in">export</span> EDITOR VISUAL<span class="hljs-comment"># ========================================</span></code></pre></div><h3 id="Gwenview-无法显示-webp-图像"><a href="#Gwenview-无法显示-webp-图像" class="headerlink" title="Gwenview 无法显示 webp 图像"></a>Gwenview 无法显示 webp 图像</h3><div class="code-wrapper"><pre><code class="hljs bash">sudo pacman -S qt5-imageformats</code></pre></div><h2 id="编程环境配置"><a href="#编程环境配置" class="headerlink" title="编程环境配置"></a>编程环境配置</h2><h3 id="OpenCV（C-和-Python）"><a href="#OpenCV（C-和-Python）" class="headerlink" title="OpenCV（C++ 和 Python）"></a>OpenCV（C++ 和 Python）</h3><ol><li><p>安装依赖包</p><div class="code-wrapper"><pre><code class="hljs bash">sudo pacman -S opencv hdf5 tkpip install opencv-python</code></pre></div></li><li><p>编辑项目的 CMake 文件，添加如下两行（仅 C++ 需要）</p><div class="code-wrapper"><pre><code class="hljs cmake"><span class="hljs-keyword">find_package</span> (OpenCV <span class="hljs-number">4.0</span>.<span class="hljs-number">0</span> REQUIRED)<span class="hljs-keyword">include_directories</span> (<span class="hljs-string">&quot;/usr/include/opencv4/&quot;</span>)</code></pre></div></li></ol><h3 id="C-Boost-库"><a href="#C-Boost-库" class="headerlink" title="C++ Boost 库"></a>C++ Boost 库</h3><div class="code-wrapper"><pre><code class="hljs bash">sudo pacman -Ss boost</code></pre></div><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://arch-linux.osrc.com/">archlinux 简明指南</a></li><li><a href="https://wiki.archlinux.org/title/NVIDIA">NVIDIA - ArchWiki</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;为什么离开-Windows&quot;&gt;&lt;a href=&quot;#为什么离开-Windows&quot; class=&quot;headerlink&quot; title=&quot;为什么离开 Windows&quot;&gt;&lt;/a&gt;为什么离开 Windows&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;微软的监控&lt;/li&gt;
&lt;li&gt;盗版的风险</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://schenga39.github.io/hexo-blog/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux sysctl 调优实战</title>
    <link href="https://schenga39.github.io/hexo-blog/2023/06/11/Linux-sysctl-%E8%B0%83%E4%BC%98%E5%AE%9E%E6%88%98/"/>
    <id>https://schenga39.github.io/hexo-blog/2023/06/11/Linux-sysctl-%E8%B0%83%E4%BC%98%E5%AE%9E%E6%88%98/</id>
    <published>2023-06-11T16:00:00.000Z</published>
    <updated>2025-07-24T07:27:31.323Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sysctl-的使用方式"><a href="#sysctl-的使用方式" class="headerlink" title="sysctl 的使用方式"></a>sysctl 的使用方式</h2><ol><li>使用命令 <code>sysctl -w key=value</code> 手动调整选项值</li><li>使用命令 <code>sysctl key</code> 获取选项当前的值</li><li>（推荐）先编辑文件 <code>/etc/sysctl.conf</code> 然后使用命令 <code>sysctl -p</code> 一键导入已修改的键值对</li></ol><h2 id="使用合适的拥塞控制算法"><a href="#使用合适的拥塞控制算法" class="headerlink" title="使用合适的拥塞控制算法"></a>使用合适的拥塞控制算法</h2><p>拥塞控制是通过算法来提升或降低数据发送速率以防止网络出现拥堵。常见的拥塞控制算法有 reno、cubic、bbr 等，其中 reno 和 cubic 是基于丢失的算法（出现拥堵后降低发送速率），bbr 则是基于模型（监控延迟是否改变）。</p><p>在 Linux 中可以使用 <code>sysctl net.ipv4.tcp_congestion_control</code> 查看当前系统使用的拥塞控制算法。使用 <code>uname -r</code> 查看 Linux 内核版本，若版本低于 4.9 则未内置 bbr 算法，可以先更新内核版本。</p><h2 id="优化完成后的-sysctl-conf-文件"><a href="#优化完成后的-sysctl-conf-文件" class="headerlink" title="优化完成后的 sysctl.conf 文件"></a>优化完成后的 sysctl.conf 文件</h2><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 文件系统优化</span>fs.aio-max-nr=1048576fs.file-max=1000000fs.inotify.max_user_instances=4096fs.lease-break-time=30<span class="hljs-comment"># 开启崩溃自动重启</span>kernel.panic=1kernel.sysrq=0kernel.pid_max=1000000net.core.default_qdisc=fqnet.core.netdev_max_backlog=65536net.core.rmem_default=3400000net.core.rmem_max=67000000net.core.somaxconn=65535net.core.wmem_default=3400000net.core.wmem_max=67000000net.core.optmem_max=67000000<span class="hljs-comment"># 关闭 ICMP 重定向请求</span>net.ipv4.conf.default.accept_redirects=0net.ipv4.conf.default.rp_filter=1net.ipv4.conf.default.accept_redirects=0net.ipv4.conf.default.secure_redirects=0<span class="hljs-comment"># 路由系统中不要禁用</span>net.ipv4.conf.default.send_redirects=0<span class="hljs-comment"># 禁 ping</span>net.ipv4.icmp_echo_ignore_all=1net.ipv6.icmp.echo_ignore_all=1<span class="hljs-comment"># 关闭攻击记录日志</span>net.ipv4.conf.default.log_martians=0<span class="hljs-comment"># 禁用 IP 源路由</span>net.ipv4.conf.default.accept_source_route=0<span class="hljs-comment"># 避免放大攻击</span>net.ipv4.icmp_echo_ignore_broadcasts=1<span class="hljs-comment"># 启用恶意错误信息防护</span>net.ipv4.icmp_ignore_bogus_error_responses=1<span class="hljs-comment"># 关闭 IPv4 包转发</span>net.ipv4.ip_forward=0<span class="hljs-comment"># 增大本地端口范围</span>net.ipv4.ip_local_port_range=1024 65000<span class="hljs-comment"># 开启 MTU 嗅探</span>net.ipv4.ip_no_pmtu_disc=0<span class="hljs-comment"># 加快路由缓存刷新频率</span>net.ipv4.route.gc_timeout=100net.ipv4.tcp_adv_win_scale=1net.ipv4.tcp_base_mss=1024net.ipv4.tcp_comp_sack_delay_ns=1000000<span class="hljs-comment"># 调整拥塞控制算法为 BBR</span>net.ipv4.tcp_congestion_control=bbr<span class="hljs-comment"># 关闭 early demux</span>net.ipv4.tcp_early_demux=0net.ipv4.tcp_ecn=1net.ipv4.tcp_ecn_fallback=1<span class="hljs-comment"># 开启发送和接收双向的 fastopen</span>net.ipv4.tcp_fastopen=3<span class="hljs-comment"># 缩短处于 FIN_WAIT_2 状态的时间</span>net.ipv4.tcp_fin_timeout=30net.ipv4.tcp_frto=2<span class="hljs-comment"># TCP 发送心跳包的时间间隔</span>net.ipv4.tcp_keepalive_time=1200net.ipv4.tcp_keepalive_intvl=30net.ipv4.tcp_keepalive_probes=3<span class="hljs-comment"># 已记住的连接数</span>net.ipv4.tcp_max_syn_backlog=2048<span class="hljs-comment"># 增大 tw buckets</span>net.ipv4.tcp_max_tw_buckets=2000000net.ipv4.tcp_min_rtt_wlen=50net.ipv4.tcp_min_tso_segs=2<span class="hljs-comment"># TCP 包大小自适应</span>net.ipv4.tcp_moderate_rcvbuf=1<span class="hljs-comment"># 打开 TCP MTU 嗅探</span>net.ipv4.tcp_mtu_probing=1net.ipv4.tcp_no_metrics_save=1<span class="hljs-comment"># 开启 tcp_notsent_lowat</span>net.ipv4.tcp_notsent_lowat=131072net.ipv4.tcp_orphan_retries=2net.ipv4.tcp_recovery=1net.ipv4.tcp_reordering=6<span class="hljs-comment"># 放弃回应一个 TCP 连接请求前需进行多少次重试</span>net.ipv4.tcp_retries1=3<span class="hljs-comment"># 在丢弃已建立通讯状况的 TCP 连接前需进行多少次重试</span>net.ipv4.tcp_retries2=3<span class="hljs-comment"># 开启 RFC1337 标准</span>net.ipv4.tcp_rfc1337=1<span class="hljs-comment"># 启用有选择的应答</span>net.ipv4.tcp_sack=1net.ipv4.tcp_fack=1net.ipv4.tcp_tw_reuse=1net.ipv4.tcp_max_orphans=3276800<span class="hljs-comment"># 加快重发</span>net.ipv4.tcp_slow_start_after_idle=0net.ipv4.tcp_early_retrans=1net.ipv4.tcp_syn_retries=3net.ipv4.tcp_synack_retries=2<span class="hljs-comment"># SYN 等待队列溢出时启用 cookies 处理, 防止 SYN 攻击</span>net.ipv4.tcp_syncookies=1<span class="hljs-comment"># 开启 TCP 时间戳, 防止 TCP 的 RST 攻击</span>net.ipv4.tcp_timestamps=1net.ipv4.tcp_tso_win_divisor=2<span class="hljs-comment"># 要支持超过 64KB 的窗口大小需要启用</span>net.ipv4.tcp_window_scaling=1<span class="hljs-comment"># tcp 内存调整</span>net.ipv4.tcp_mem=78643200 104857600 157286400net.ipv4.tcp_wmem=4096 66560 70254592net.ipv4.tcp_rmem=4096 89088 70254592<span class="hljs-comment"># 关闭 early demux</span>net.ipv4.udp_early_demux=0<span class="hljs-comment"># 增大 UDP 内存限制</span>net.ipv4.udp_mem=78643200 104857600 157286400<span class="hljs-comment"># net.ipv4.udp_rmem_min=94500000</span><span class="hljs-comment"># net.ipv4.udp_wmem_min=94500000</span><span class="hljs-comment"># 不使用 IPv6 时彻底关闭 IPv6</span>net.ipv6.conf.default.disable_ipv6=1<span class="hljs-comment"># 使用 IPv6 时优化</span><span class="hljs-comment"># net.ipv6.conf.all.forwarding=1</span><span class="hljs-comment"># net.ipv6.conf.all.accept_ra=2</span><span class="hljs-comment"># net.ipv6.conf.all.proxy_ndp=1</span><span class="hljs-comment"># net.ipv6.conf.all.hop_limit=128</span><span class="hljs-comment"># net.ipv6.conf.default.hop_limit=128</span><span class="hljs-comment"># net.ipv6.route.min_adv_mss=1024</span><span class="hljs-comment"># net.ipv6.route.mtu_expires=600</span><span class="hljs-comment"># 调整内存写回策略</span>vm.dirty_background_ratio=2vm.dirty_expire_centisecs=600vm.dirty_ratio=5vm.dirty_writeback_centisecs=100vm.max_map_count=262144vm.min_free_kbytes=262144vm.swappiness=10vm.vfs_cache_pressure=200<span class="hljs-comment"># netfilter 调整</span>net.netfilter.nf_conntrack_acct=1net.netfilter.nf_conntrack_checksum=0net.netfilter.nf_conntrack_max=65535net.netfilter.nf_conntrack_tcp_timeout_established=7440net.netfilter.nf_conntrack_udp_timeout=60net.netfilter.nf_conntrack_udp_timeout_stream=180</code></pre></div><h2 id="调整-Linux-系统限制"><a href="#调整-Linux-系统限制" class="headerlink" title="调整 Linux 系统限制"></a>调整 Linux 系统限制</h2><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 修改系统安全限制</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;* soft nofile 51200&quot;</span> &gt;&gt; /etc/security/limits.conf<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;* hard nofile 51200&quot;</span> &gt;&gt; /etc/security/limits.conf<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;session required pam_limits.so&quot;</span> &gt;&gt; /etc/pam.d/common-session<span class="hljs-comment"># 配置开机修改限制</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ulimit -n 1000000&quot;</span> &gt;&gt; /etc/profile<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ulimit -i 193045&quot;</span> &gt;&gt; /etc/profile<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ulimit -l 64&quot;</span> &gt;&gt; /etc/profile<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ulimit -u 1000000&quot;</span> &gt;&gt; /etc/profile</code></pre></div><h2 id="关闭网卡-NAPI-功能"><a href="#关闭网卡-NAPI-功能" class="headerlink" title="关闭网卡 NAPI 功能"></a>关闭网卡 NAPI 功能</h2><p>网卡的 NAPI 功能可能会带来延迟的波动和其他问题，可使用以下命令将其关闭：</p><div class="code-wrapper"><pre><code class="hljs bash">ethtool -C eth0 rx-usecs 0</code></pre></div><h2 id="调整网卡的接收和发送队列"><a href="#调整网卡的接收和发送队列" class="headerlink" title="调整网卡的接收和发送队列"></a>调整网卡的接收和发送队列</h2><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 查看当前网卡的队列长度</span>ethtool -g eth0<span class="hljs-comment"># 修改 eth0 接收和发送队列长度为 4096</span>ethtool -G eth0 rx 4096ethtool -G eth0 tx 4096<span class="hljs-comment"># 增加 txqueuelen</span>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> dev eth0 txqueuelen 4096<span class="hljs-comment"># 如果在运行旧版本内核, 应手动增加 txqueuelen 到 1000</span>ifconfig eth0 txqueuelen 1000</code></pre></div><h2 id="增大-Swap-分区"><a href="#增大-Swap-分区" class="headerlink" title="增大 Swap 分区"></a>增大 Swap 分区</h2><p>推荐设置的 Swap 分区大小和内存大小的对应关系如下表：</p><table><thead><tr><th>内存大小</th><th>推荐的 Swap 分区大小</th></tr></thead><tbody><tr><td>小于 4g</td><td>4G</td></tr><tr><td>4-16G</td><td>8G</td></tr><tr><td>16-64G</td><td>16G</td></tr><tr><td>64-256G</td><td>32G</td></tr></tbody></table><p>可使用如下命令改变创建新的 Swap 文件并设置开启自动启用：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 查看当前分区状况</span>free -m<span class="hljs-comment"># 关闭所有 Swap</span>swapoff -a<span class="hljs-comment"># 创建新的 Swap 文件: 块大小为 1MB (1048576 bytes)，数量为 4096</span><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=/var/swapfile bs=1M count=4096<span class="hljs-comment"># 设置文件为 Swap</span>mkswap /var/swapfile<span class="hljs-comment"># 启用 Swap 分区</span>swapon /var/swapfile<span class="hljs-comment"># 查看当前分区状况</span>free -m<span class="hljs-comment"># 设置开启启动</span>vim /etc/fstab<span class="hljs-comment"># ========================================</span>/var/swapfile swap swap defaults 0 0<span class="hljs-comment"># ========================================</span></code></pre></div><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://www.kernel.org/doc/html/latest/networking/ip-sysctl.html">IP Sysctl — The Linux Kernel documentation</a></li><li><a href="https://blog.csdn.net/MssGuo/article/details/120586496">Linux 如何增大、缩小 swap 分区</a></li><li><a href="https://gist.github.com/voluntas/bc54c60aaa7ad6856e6f6a928b79ab6c">Sysctl configuration for high performance</a></li><li><a href="https://access.redhat.com/sites/default/files/attachments/20150325_network_performance_tuning.pdf">Red Hat Enterprise Linux Network Performance Tuning Guide</a></li><li><a href="https://wiki.linuxfoundation.org/networking/napi#disadvantages">networking:napi</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;sysctl-的使用方式&quot;&gt;&lt;a href=&quot;#sysctl-的使用方式&quot; class=&quot;headerlink&quot; title=&quot;sysctl 的使用方式&quot;&gt;&lt;/a&gt;sysctl 的使用方式&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;使用命令 &lt;code&gt;sysctl -w key</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://schenga39.github.io/hexo-blog/tags/Linux/"/>
    
    <category term="性能优化" scheme="https://schenga39.github.io/hexo-blog/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Windows 系统新装优化指南</title>
    <link href="https://schenga39.github.io/hexo-blog/2023/05/07/Windows-%E7%B3%BB%E7%BB%9F%E6%96%B0%E8%A3%85%E4%BC%98%E5%8C%96%E6%8C%87%E5%8D%97/"/>
    <id>https://schenga39.github.io/hexo-blog/2023/05/07/Windows-%E7%B3%BB%E7%BB%9F%E6%96%B0%E8%A3%85%E4%BC%98%E5%8C%96%E6%8C%87%E5%8D%97/</id>
    <published>2023-05-07T16:00:00.000Z</published>
    <updated>2025-07-24T07:27:31.324Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装驱动和基本软件：驱动装完再装软件"><a href="#安装驱动和基本软件：驱动装完再装软件" class="headerlink" title="安装驱动和基本软件：驱动装完再装软件"></a>安装驱动和基本软件：驱动装完再装软件</h2><p>驱动安装顺序：</p><ol><li>主板相关驱动</li><li>BIOS 更新（如果有）</li><li>显卡、网卡、声卡</li><li>其他驱动</li><li>配套软件</li><li>杀软（如果需要）</li></ol><h2 id="使用-Dism-卸载系统无用软件并关闭系统更新"><a href="#使用-Dism-卸载系统无用软件并关闭系统更新" class="headerlink" title="使用 Dism++ 卸载系统无用软件并关闭系统更新"></a>使用 Dism++ 卸载系统无用软件并关闭系统更新</h2><p>若软件在用户应用和预装应用里都有，那么先在用户应用中删除再在预装应用中删除</p><ul><li>有用的 Appx<ul><li>应用商店相关</li><li>UI 相关</li><li>各种 VCLibs</li><li>.NET 环境</li><li>Webp、VP9、HEIF 等格式扩展支持</li><li>画图、截图等</li></ul></li></ul><h2 id="关闭无用的服务"><a href="#关闭无用的服务" class="headerlink" title="关闭无用的服务"></a>关闭无用的服务</h2><p><img src="/hexo-blog/2023/05/07/Windows-%E7%B3%BB%E7%BB%9F%E6%96%B0%E8%A3%85%E4%BC%98%E5%8C%96%E6%8C%87%E5%8D%97/%E7%A6%81%E7%94%A8%E6%9C%8D%E5%8A%A1_1.webp"></p><p><img src="/hexo-blog/2023/05/07/Windows-%E7%B3%BB%E7%BB%9F%E6%96%B0%E8%A3%85%E4%BC%98%E5%8C%96%E6%8C%87%E5%8D%97/%E7%A6%81%E7%94%A8%E6%9C%8D%E5%8A%A1_2.webp"></p><p><img src="/hexo-blog/2023/05/07/Windows-%E7%B3%BB%E7%BB%9F%E6%96%B0%E8%A3%85%E4%BC%98%E5%8C%96%E6%8C%87%E5%8D%97/%E7%A6%81%E7%94%A8%E6%9C%8D%E5%8A%A1_3.webp"></p><p><img src="/hexo-blog/2023/05/07/Windows-%E7%B3%BB%E7%BB%9F%E6%96%B0%E8%A3%85%E4%BC%98%E5%8C%96%E6%8C%87%E5%8D%97/%E7%A6%81%E7%94%A8%E6%9C%8D%E5%8A%A1_4.webp"></p><p>对需要禁用的服务说明如下：</p><ul><li>AVCTP 服务：蓝牙耳机相关</li><li>Hyper-V 相关服务：HV 主机相关</li><li>Edge 更新服务：新版 Edge 相关</li><li>Smart Card 开头的服务：智能卡相关</li><li>SSDP Discovery、Function Discovery Provider Host、UPnP Device Host、Function Discovery Resource Publication：Upnp、SSDP 服务</li><li>Shell Hardware Detection：自动播放功能</li><li>Quality Windows Audio Video Experience：可禁用</li><li>Windows Search：务必关闭</li><li>SysMain：使用固态硬盘的请关闭</li><li>IP Helper：提供 IPv6 到 IPv4 的转换，不使用 IPv6 的可以关闭</li><li>TCP&#x2F;IP NetBIOS Helper：提供 NetBIOS 相关功能</li><li>Print 开头的三项服务：提供打印相关服务，不使用打印机的可以关闭</li><li>无线网卡搜不到网络的，一般都是因为无线电管理服务被禁用了</li><li>带 <code>_xxxxx</code> 后缀的服务可能在服务里调整不了，需到注册表的 <code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\</code> 目录下调整（2 自动，3 手动，4 禁用）<ul><li>BcastDVRUserService_xxx Xbox 游戏录制，根据需求选择 3&#x2F;4</li><li>BluetoothUserService_xxx 蓝牙服务，建议 3</li><li>ConsentUxUserSvc_xxx、DevicesFlowUserSvc_xxx、DevicePickerUserSvc_xxx、DeviceAssociationBrokerSvc_xxx、UdkUserSvc_xxx 连接设备时可能会用到，建议 3</li><li>CaptureService_xxx 截图工具可能会用到的 api，建议 3</li><li>cbdhsvc_xxx 剪贴板，建议 2&#x2F;3</li><li>CDPUserSvc_xxx 同步用户设置、隐私等数据用的，想保护隐私的选 3，需要这项功能的选 2</li><li>CredentialEnrollmentManagerUserSvc_xxx 凭据管理器，存储密码用的，建议 2&#x2F;3</li><li>MessagingService_xxx 需要短信功能的 3，不用的 4</li><li>UnistoreSvc_xxx、UserDataSvc_xxx、储存、访问联系人、邮件等用户数据，需要用的 3，不用的 4</li><li>PimIndexMaintenanceSvc_xxx 联系人相关，用的 3，不用的 4</li><li>PrintWorkflowUserSvc_xxx 打印机相关，选 3</li><li>WpnUserService_xxx 推送系统通知用的，选 2</li><li>OneSyncSvc、OneSyncSvc_xxxx 不需要同步的可以 4</li></ul></li></ul><h2 id="释放系统预留的-7G-空间"><a href="#释放系统预留的-7G-空间" class="headerlink" title="释放系统预留的 7G 空间"></a>释放系统预留的 7G 空间</h2><p><code>DISM.exe /Online /Set-ReservedStorageState /State:Disabled</code></p><h2 id="避免微软输入法卡顿"><a href="#避免微软输入法卡顿" class="headerlink" title="避免微软输入法卡顿"></a>避免微软输入法卡顿</h2><p>右键输入法，设置 -&gt; 常规，在兼容性里选择使用以前版本的微软输入法</p><h2 id="解决提示需要新应用打开此-ms-screenclip-链接"><a href="#解决提示需要新应用打开此-ms-screenclip-链接" class="headerlink" title="解决提示需要新应用打开此 ms-screenclip 链接"></a>解决提示需要新应用打开此 ms-screenclip 链接</h2><p><code>DISM /Online /Add-Capability /CapabilityName:Windows.Client.ShellComponents~~~~0.0.1.0</code></p><h2 id="推荐精简版系统"><a href="#推荐精简版系统" class="headerlink" title="推荐精简版系统"></a>推荐精简版系统</h2><p>远景论坛 <strong>不忘初心</strong> 大神的各类精简版系统</p><h2 id="右键菜单管理"><a href="#右键菜单管理" class="headerlink" title="右键菜单管理"></a>右键菜单管理</h2><p><a href="https://github.com/BluePointLilac/ContextMenuManager">GitHub - BluePointLilac&#x2F;ContextMenuManager: 🖱️ 纯粹的 Windows 右键菜单管理程序</a></p><h2 id="解决-AMD-CPU-卡顿的问题"><a href="#解决-AMD-CPU-卡顿的问题" class="headerlink" title="解决 AMD CPU 卡顿的问题"></a>解决 AMD CPU 卡顿的问题</h2><p>关闭 BIOS 中的 <code>AMD Platform Security Processor</code></p><h2 id="Windows-11-改回-Windows-10-的右键菜单"><a href="#Windows-11-改回-Windows-10-的右键菜单" class="headerlink" title="Windows 11 改回 Windows 10 的右键菜单"></a>Windows 11 改回 Windows 10 的右键菜单</h2><p>打开 cmd 并输入 <code>reg add &quot;HKCU\Software\Classes\CLSID\&#123;86ca1aa0-34aa-4e8b-a509-50c905bae2a2&#125;\InprocServer32&quot; /f /ve</code> 后重启资源管理器即可生效。要恢复为 Windows 11 右键菜单，则使用命令：<code>reg delete &quot;HKCU\Software\Classes\CLSID\&#123;86ca1aa0-34aa-4e8b-a509-50c905bae2a2&#125;&quot; /f</code></p><h2 id="CPU-响应速度优化"><a href="#CPU-响应速度优化" class="headerlink" title="CPU 响应速度优化"></a>CPU 响应速度优化</h2><p>下载软件 QuickCPU，将左下角 Core Parking、Frequency Scaling、Turbo boost、Performance 全部拉满即可。</p><h2 id="加速系统响应速度"><a href="#加速系统响应速度" class="headerlink" title="加速系统响应速度"></a>加速系统响应速度</h2><p>注册表找到 <code>计算机\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management</code>，根据屏幕分辨率修改 SessionPoolSize 和 SessionViewSize</p><ul><li>SessionPoolSize：1080P 改为 62K 改为 12，4K 改为 24</li><li>SessionViewSize：1080P 改为 62，2K 改为 144，4K 改为 288</li></ul><h2 id="针对-Ryzen-笔记本的优化"><a href="#针对-Ryzen-笔记本的优化" class="headerlink" title="针对 Ryzen 笔记本的优化"></a>针对 Ryzen 笔记本的优化</h2><h3 id="风扇转速"><a href="#风扇转速" class="headerlink" title="风扇转速"></a>风扇转速</h3><ol><li><p>使用软件 atrofac</p></li><li><p>点击 Edit Configuration 配置，常用的配置如下</p><div class="code-wrapper"><pre><code class="hljs conf"># 极度安静cpu_curve:&quot;30c:0%,40c:0%,50c:0%,60c:0%,70c:10%,80c:20%,90c:60%,100c:99%&quot;# 中度安静cpu_curve: &quot;30c:5%,40c:5%,50c:5%,60c:5%,70c:30%,80c:55%,90c:78%,100c:99%&quot;# 玩游戏时cpu_curve:&quot;30c:30%,40c:30%,50c:30%,60c:30%,70c:99%,80c:99%,90c:99%,100c:99%&quot;</code></pre></div></li></ol><h3 id="开启性能模式"><a href="#开启性能模式" class="headerlink" title="开启性能模式"></a>开启性能模式</h3><ol><li>运行 regedit 打开注册表</li><li>找到 <code>计算机\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Power\PowerSettings\54533251-82be-4824-96c1-47b60b740d00\be337238-0d82-4146-a960-4f3749d470c7</code>，修改右侧 Attributes 修改值为 2</li><li>在电源管理中可以看到处理器性能提升模式，启用可以开启睿频，关闭可关闭睿频</li></ol><h3 id="调整-AMD-CPU-核显的-TDP-修正周期"><a href="#调整-AMD-CPU-核显的-TDP-修正周期" class="headerlink" title="调整 AMD CPU 核显的 TDP 修正周期"></a>调整 AMD CPU 核显的 TDP 修正周期</h3><ol><li>使用软件 <code>AMD APUTuning Utility</code></li><li>在 <code>Pre-Made Presets</code> 中找到自己的处理器应用即可</li></ol><h3 id="延长电池寿命"><a href="#延长电池寿命" class="headerlink" title="延长电池寿命"></a>延长电池寿命</h3><ol><li>使用软件 <code>MyASUS</code></li><li>设置笔记本充满电电量为 60%</li></ol><h2 id="FPS-禁用全屏优化"><a href="#FPS-禁用全屏优化" class="headerlink" title="FPS 禁用全屏优化"></a>FPS 禁用全屏优化</h2><p>打开注册表，进入 <code>计算机\HKEY_CURRENT_USER\System\GameConfigStore</code></p><ul><li>GameDVR_FSEBehaviorMode：2</li><li>GameDVR_HonorUserFSEBehaviorMode：1</li><li>GameDVR_FSEBehavior：2</li><li>GameDVR_DXGIHonorFSEWindowsCompatible：1</li></ul><h2 id="笔记本配置触控板手势"><a href="#笔记本配置触控板手势" class="headerlink" title="笔记本配置触控板手势"></a>笔记本配置触控板手势</h2><ol><li>Windows 10 进入 设置 -&gt; 设备 -&gt; 触摸板 -&gt; 高级手势配置 设置自定义手势</li><li>个人使用的设置<ul><li>三指点击：关闭 (Ctrl+W)</li><li>三指向上轻扫：向后导航</li><li>三指向下轻扫：回到桌面 (Win+D)</li><li>三指向左轻扫：切换应用 (Alt+Tab)</li><li>三指向右轻扫：切换应用 (Alt+Tab)</li><li>四指点击：播放 &#x2F; 暂停</li><li>四指向上轻扫：添加新的标签页 (Ctrl+T)</li><li>四指向下轻扫：关闭当前页面 (Ctrl+W)</li><li>四指向左轻扫：上一个标签 (Ctrl+Shift+Tab)</li><li>四指向右轻扫：下一个标签 (Ctrl+Tab)</li></ul></li></ol><h2 id="关闭-Virtualization-based-Security"><a href="#关闭-Virtualization-based-Security" class="headerlink" title="关闭 Virtualization-based Security"></a>关闭 Virtualization-based Security</h2><ol><li>按 Win+S，输入 System Information 或 msinfo32，如果 Virtualization-based security 为 Running 则已启用</li><li>按 Win+S，输入 Core Isolation，将内存完整性保护关闭</li><li>运行 regedit，进入 <code>计算机\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\DeviceGuard</code>，新建 DWORD <code>EnableVirtualizationBasedSecurity</code> 并赋值 0</li></ol><h2 id="彻底关闭-Hyper-V-虚拟机"><a href="#彻底关闭-Hyper-V-虚拟机" class="headerlink" title="彻底关闭 Hyper-V 虚拟机"></a>彻底关闭 Hyper-V 虚拟机</h2><div class="code-wrapper"><pre><code class="hljs powershell">bcdedit /<span class="hljs-built_in">set</span> hypervisorlaunchtype off</code></pre></div><h2 id="重置所有系统应用"><a href="#重置所有系统应用" class="headerlink" title="重置所有系统应用"></a>重置所有系统应用</h2><div class="code-wrapper"><pre><code class="hljs powershell"><span class="hljs-comment"># 输入 Y 并回车</span><span class="hljs-built_in">Set-ExecutionPolicy</span> Unrestricted<span class="hljs-built_in">Get-AppXPackage</span> <span class="hljs-literal">-AllUsers</span> | <span class="hljs-keyword">Foreach</span> &#123;<span class="hljs-built_in">Add-AppxPackage</span> <span class="hljs-literal">-DisableDevelopmentMode</span> <span class="hljs-literal">-Register</span> <span class="hljs-string">&quot;<span class="hljs-variable">$</span>(<span class="hljs-variable">$_</span>.InstallLocation)\AppXManifest.xml&quot;</span>&#125;<span class="hljs-built_in">Get-AppxPackage</span> Microsoft.SecHealthUI <span class="hljs-literal">-AllUsers</span> | <span class="hljs-built_in">Reset-AppxPackage</span></code></pre></div><h2 id="关闭笔记本-S0-睡眠状态"><a href="#关闭笔记本-S0-睡眠状态" class="headerlink" title="关闭笔记本 S0 睡眠状态"></a>关闭笔记本 S0 睡眠状态</h2><div class="code-wrapper"><pre><code class="hljs powershell"><span class="hljs-comment"># 查询系统固件支持哪些睡眠状态</span>powercfg /a<span class="hljs-comment"># 关闭 S0 睡眠状态</span>reg add <span class="hljs-string">&quot;HKLM\System\CurrentControlSet\Control\Power&quot;</span> /v PlatformAoAcOverride /t REG_DWORD /d <span class="hljs-number">0</span><span class="hljs-comment"># 重新开启 S0 睡眠状态</span>reg delete <span class="hljs-string">&quot;HKLM\System\CurrentControlSet\Control\Power&quot;</span> /v PlatformAoAcOverride /f</code></pre></div><h2 id="优化系统-MTU"><a href="#优化系统-MTU" class="headerlink" title="优化系统 MTU"></a>优化系统 MTU</h2><div class="code-wrapper"><pre><code class="hljs powershell"><span class="hljs-comment"># 查看当前使用的 MTU 大小</span>netsh interface ipv4 show subinterfaces<span class="hljs-comment"># 使 -l 后的参数最大但可 ping 通</span>ping baidu.com <span class="hljs-operator">-f</span> <span class="hljs-literal">-l</span> <span class="hljs-number">1464</span><span class="hljs-comment"># 将得到的数值加 28</span><span class="hljs-comment"># 本机设置, 也可在路由器设置</span>netsh int ipv4 <span class="hljs-built_in">set</span> subinterface <span class="hljs-string">&quot;本地连接&quot;</span> mtu=<span class="hljs-number">1492</span> store=persistent</code></pre></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装驱动和基本软件：驱动装完再装软件&quot;&gt;&lt;a href=&quot;#安装驱动和基本软件：驱动装完再装软件&quot; class=&quot;headerlink&quot; title=&quot;安装驱动和基本软件：驱动装完再装软件&quot;&gt;&lt;/a&gt;安装驱动和基本软件：驱动装完再装软件&lt;/h2&gt;&lt;p&gt;驱动安装顺序</summary>
      
    
    
    
    
    <category term="性能优化" scheme="https://schenga39.github.io/hexo-blog/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    <category term="Windows" scheme="https://schenga39.github.io/hexo-blog/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>关于 Project Sekai 锁区和无法进入游戏的解决方案</title>
    <link href="https://schenga39.github.io/hexo-blog/2023/04/29/%E5%85%B3%E4%BA%8E-Project-Sekai-%E9%94%81%E5%8C%BA%E5%92%8C%E6%97%A0%E6%B3%95%E8%BF%9B%E5%85%A5%E6%B8%B8%E6%88%8F%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://schenga39.github.io/hexo-blog/2023/04/29/%E5%85%B3%E4%BA%8E-Project-Sekai-%E9%94%81%E5%8C%BA%E5%92%8C%E6%97%A0%E6%B3%95%E8%BF%9B%E5%85%A5%E6%B8%B8%E6%88%8F%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2023-04-29T16:00:00.000Z</published>
    <updated>2025-07-24T07:27:31.330Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>Project Sekai: Colorful Stage! feat. Hatsune Miku</code>（以下简称 <code>PJSK</code>）是世嘉开发的一款音乐游戏，在进入游戏的过程中会检测玩家 IP 是否在允许列表中，如果不在则会禁止玩家登录。无法登录游戏的常见情况有如下几种：</p><ol><li><p>提示 <code>会话已过期，返回标题界面</code>（如图），这种情况一般是 IP 不在允许登录的范围内，即 <strong>被锁区</strong></p><p><img src="/hexo-blog/2023/04/29/%E5%85%B3%E4%BA%8E-Project-Sekai-%E9%94%81%E5%8C%BA%E5%92%8C%E6%97%A0%E6%B3%95%E8%BF%9B%E5%85%A5%E6%B8%B8%E6%88%8F%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/1682833256196.webp"></p></li><li><p>依次出现两个弹窗，第一个提示 <code>发生通信错误</code>，第二个提示 <code>回到标题界面</code>，一般是网络不稳定造成的，不能确定是否被锁区</p><p><img src="/hexo-blog/2023/04/29/%E5%85%B3%E4%BA%8E-Project-Sekai-%E9%94%81%E5%8C%BA%E5%92%8C%E6%97%A0%E6%B3%95%E8%BF%9B%E5%85%A5%E6%B8%B8%E6%88%8F%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/1682833260822.webp"></p><p><img src="/hexo-blog/2023/04/29/%E5%85%B3%E4%BA%8E-Project-Sekai-%E9%94%81%E5%8C%BA%E5%92%8C%E6%97%A0%E6%B3%95%E8%BF%9B%E5%85%A5%E6%B8%B8%E6%88%8F%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/1682833264335.webp"></p></li><li><p>进入游戏登录界面并点击后又返回登录界面，并且无任何弹窗提示，这种和第二种情况类似，一般为网络原因</p></li></ol><h2 id="锁区原理探究"><a href="#锁区原理探究" class="headerlink" title="锁区原理探究"></a>锁区原理探究</h2><p>对于以上的第二和第三种情况，请检查网络问题并重试，这里重点讨论第一种情况（被锁区）的解决方案。</p><p>在进入游戏的过程中主要向以下几个域名发起连接：</p><div class="code-wrapper"><pre><code class="hljs bash">cdp.cloud.unity3d.comconfig.uca.cloud.unity3d.comproduction-xxxxxxxx-assetbundle.sekai.colorfulpalette.orgproduction-xxxxxxxx-assetbundle-info.sekai.colorfulpalette.orgissue.sekai.colorfulpalette.orggame-version.sekai.colorfulpalette.org</code></pre></div><p>以下域名是 unity 用于收集分析数据的（见 <a href="https://stackoverflow.com/questions/46045805/why-my-game-is-trying-to-connect-to-external-server">https://stackoverflow.com/questions/46045805/why-my-game-is-trying-to-connect-to-external-server</a>），这两个域名在进入游戏 Rizline 时也会出现</p><div class="code-wrapper"><pre><code class="hljs bash">cdp.cloud.unity3d.comconfig.uca.cloud.unity3d.com</code></pre></div><p>以下域名为游戏中分发静态资源（例如音乐、谱面文件和图片等）的域名，其中 <code>xxxxxxxx</code> 为八位字母和数字组合</p><div class="code-wrapper"><pre><code class="hljs bash">production-xxxxxxxx-assetbundle.sekai.colorfulpalette.orgproduction-xxxxxxxx-assetbundle-info.sekai.colorfulpalette.org</code></pre></div><p>以下域名用于 <strong>游戏结束</strong> 上传成绩时和服务器通信：</p><div class="code-wrapper"><pre><code class="hljs bash">production-web.sekai.colorfulpalette.orgproduction-game-api.sekai.colorfulpalette.org</code></pre></div><p>以下域名用于在 <strong>登录游戏</strong> 时验证玩家 IP 是否在允许范围内（是否解锁），如果不是则会出现无法进入游戏的情况</p><div class="code-wrapper"><pre><code class="hljs bash">issue.sekai.colorfulpalette.orggame-version.sekai.colorfulpalette.org</code></pre></div><p>解决锁区问题的核心就是 <strong>以上两个域名</strong> 需要通过官方允许的 IP 向服务器发起连接。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>以 Clash 为例，首先创建一个类型为 <code>select</code> 的策略组，将可用节点添加到策略组中：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">proxy-groups:</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">プロセカ</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">select</span>    <span class="hljs-attr">use:</span> [<span class="hljs-string">机场1</span>, <span class="hljs-string">机场2</span>, <span class="hljs-string">...</span>]</code></pre></div><p>接下来需要将域名 <code>issue.sekai.colorfulpalette.org</code> 和 <code>game-version.sekai.colorfulpalette.org</code> 分流到 <code>プロセカ</code> 策略组，对应 Clash 分流规则如下：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">rules:</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">DOMAIN,issue.sekai.colorfulpalette.org,プロセカ</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">DOMAIN,game-version.sekai.colorfulpalette.org,プロセカ</span></code></pre></div><p>最后，我们还需要逐一测试 <code>プロセカ</code> 策略组中节点是否解锁，具体方法如下：</p><ol><li><p>在选择节点之后直接登录游戏，检查是否能正常进入游戏</p></li><li><p>使用 curl 或其他 HTTP 请求工具向 <code>game-version.sekai.colorfulpalette.org</code> 域名发送请求，观察返回结果</p><ul><li><p>解锁失败情况下的返回结果如下，此时登录游戏会提示 <code>会话已过期，返回标题界面</code></p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span></span><span class="hljs-tag">      <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span></span><span class="hljs-tag">      <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=iso-8859-1&quot;</span></span><span class="hljs-tag">    /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>ERROR: The request could not be satisfied<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>403 ERROR<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>The request could not be satisfied.<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">noshade</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;1px&quot;</span> /&gt;</span>    Request blocked. We can&#x27;t connect to the server for this app or website    at this time. There might be too much traffic or a configuration error.    Try again later, or contact the app or website owner.    <span class="hljs-tag">&lt;<span class="hljs-name">br</span> <span class="hljs-attr">clear</span>=<span class="hljs-string">&quot;all&quot;</span> /&gt;</span>    If you provide content to customers through CloudFront, you can find    steps to troubleshoot and help prevent this error by reviewing the    CloudFront documentation.    <span class="hljs-tag">&lt;<span class="hljs-name">br</span> <span class="hljs-attr">clear</span>=<span class="hljs-string">&quot;all&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">noshade</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;1px&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span>Generated by cloudfront (CloudFront)Request ID: qcVUtioo_xAhsMx7Q-AfWC5c-X72Abmr-fM8mv2clNXfPoJ5g3kr3g==&lt;/pre    &gt;    <span class="hljs-tag">&lt;<span class="hljs-name">address</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">address</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div></li><li><p>解锁成功时返回的结果如下，此时能正常进入游戏</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">Error</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">Code</span>&gt;</span>AccessDenied<span class="hljs-tag">&lt;/<span class="hljs-name">Code</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">Message</span>&gt;</span>Access Denied<span class="hljs-tag">&lt;/<span class="hljs-name">Message</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">RequestId</span>&gt;</span>EJ865XKG7EW1Z5W6<span class="hljs-tag">&lt;/<span class="hljs-name">RequestId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">HostId</span>&gt;</span>NhL8N6Fxgtpk4slR/6b+DSFiYhSscjPtujrr7ZKudMEgrJPn9Rd2qlBTvx02KIV3twIrtpQZkwg=<span class="hljs-tag">&lt;/<span class="hljs-name">HostId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Error</span>&gt;</span></code></pre></div></li></ul></li></ol><h2 id="节点解锁一键测试脚本"><a href="#节点解锁一键测试脚本" class="headerlink" title="节点解锁一键测试脚本"></a>节点解锁一键测试脚本</h2><p>由于 Clash 提供的 RESTful API，可以用于获取节点信息、修改策略组选中的节点。因此，测试节点是否解锁的过程可以自动化，同时避免了每次进入游戏之前都要手动选择节点的麻烦。</p><p>我为 Clash 编写的 Python 脚本如下，每次进入游戏之前运行一次即可自动已解锁的节点（注意修改相应信息）。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-comment"># 测试当前选中节点是否解锁</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_unlock</span>() -&gt; <span class="hljs-built_in">bool</span>:    <span class="hljs-keyword">try</span>:        r = requests.get(            <span class="hljs-string">&quot;https://game-version.sekai.colorfulpalette.org&quot;</span>,            headers=&#123;                <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;UnityPlayer/2019.4.3f1&quot;</span>                <span class="hljs-string">&quot;(UnityWebRequest/1.0, libcurl/7.52.0-DEV)&quot;</span>            &#125;,        )    <span class="hljs-keyword">except</span>:        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;❌解锁失败&quot;</span>)        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>    <span class="hljs-keyword">else</span>:        res = r.text.strip()        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;&lt;!DOCTYPE&quot;</span> <span class="hljs-keyword">in</span> res <span class="hljs-keyword">and</span> <span class="hljs-string">&quot;Request blocked.&quot;</span> <span class="hljs-keyword">in</span> res:            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;❌解锁失败&quot;</span>)            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>        <span class="hljs-keyword">elif</span> <span class="hljs-string">&quot;&lt;?xml&quot;</span> <span class="hljs-keyword">in</span> res <span class="hljs-keyword">and</span> <span class="hljs-string">&quot;AccessDenied&quot;</span> <span class="hljs-keyword">in</span> res:            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;✔解锁成功&quot;</span>)            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>        <span class="hljs-keyword">else</span>:            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;❓未知状态&quot;</span>)            <span class="hljs-built_in">print</span>(res)            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><span class="hljs-comment"># 假设使用的策略组名称为 `プロセカ`</span>url = <span class="hljs-string">&quot;http://192.168.1.11:9090/proxies/プロセカ&quot;</span><span class="hljs-comment"># 获取 `プロセカ` 策略组中的所有节点名称</span>r = requests.get(url)all_proxies = r.json().get(<span class="hljs-string">&quot;all&quot;</span>)<span class="hljs-comment"># 对每个节点分别测试, 找到第一个解锁成功的节点马上退出</span><span class="hljs-keyword">for</span> proxy <span class="hljs-keyword">in</span> all_proxies:    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;正在测试 <span class="hljs-subst">&#123;proxy&#125;</span>: &quot;</span>, end=<span class="hljs-string">&quot;\t\t&quot;</span>)    r = requests.put(url, json=&#123;<span class="hljs-string">&quot;name&quot;</span>: proxy&#125;)    ok = test_unlock()    <span class="hljs-keyword">if</span> ok:        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;使用节点 <span class="hljs-subst">&#123;proxy&#125;</span> 解锁成功！&quot;</span>)        <span class="hljs-keyword">break</span><span class="hljs-keyword">else</span>:    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;全部节点解锁失败！&quot;</span>)</code></pre></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Project Sekai: Colorful Stage! feat. Hatsune Miku&lt;/code&gt;（以下简称 &lt;c</summary>
      
    
    
    
    
    <category term="科学上网" scheme="https://schenga39.github.io/hexo-blog/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>ChatGPT 镜像站汇总</title>
    <link href="https://schenga39.github.io/hexo-blog/2023/03/29/ChatGPT-%E9%95%9C%E5%83%8F%E7%AB%99%E6%B1%87%E6%80%BB/"/>
    <id>https://schenga39.github.io/hexo-blog/2023/03/29/ChatGPT-%E9%95%9C%E5%83%8F%E7%AB%99%E6%B1%87%E6%80%BB/</id>
    <published>2023-03-29T16:00:00.000Z</published>
    <updated>2025-07-24T07:27:31.323Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>网站</th><th>是否需要 API key</th></tr></thead><tbody><tr><td><a href="https://chatforai.net/">https://chatforai.net/</a></td><td>可选，单日超过 10 次提问时需要</td></tr><tr><td><a href="https://chatbot.theb.ai/">https://chatbot.theb.ai/</a></td><td>否</td></tr><tr><td><a href="https://chat.binjie.site:7777/">https://chat.binjie.site:7777/</a></td><td>否</td></tr><tr><td><a href="https://chat.forchange.cn/">https://chat.forchange.cn/</a></td><td>是</td></tr><tr><td><a href="https://aigcfun.com/">https://aigcfun.com/</a></td><td>是</td></tr><tr><td><a href="https://chat.zecoba.cn/">https://chat.zecoba.cn/</a></td><td>否</td></tr><tr><td><a href="https://freegpt.one/">https://freegpt.one/</a></td><td>否</td></tr><tr><td><a href="https://chatgpt.ddiu.io/">https://chatgpt.ddiu.io/</a></td><td>否</td></tr><tr><td><a href="https://chat.binjie.site:7777/">https://chat.binjie.site:7777/</a></td><td>否</td></tr><tr><td><a href="https://gpt.getshare.net/">https://gpt.getshare.net/</a></td><td>否</td></tr><tr><td><a href="https://gpt.xeasy.me/">https://gpt.xeasy.me/</a></td><td>所有用户每天共用 $50 请求</td></tr><tr><td><a href="https://gpt.tool00.com/">https://gpt.tool00.com/</a></td><td>否</td></tr><tr><td><a href="https://trychatgp.com/">https://trychatgp.com/</a></td><td>5 次免费提问，之后需购买</td></tr><tr><td><a href="https://freegpt.cc/">https://freegpt.cc/</a></td><td>是</td></tr><tr><td><a href="https://gpt.candobear.com/">https://gpt.candobear.com/</a></td><td>是</td></tr><tr><td><a href="https://chatgpt-webpage.vercel.app/">https://chatgpt-webpage.vercel.app/</a></td><td>否</td></tr><tr><td><a href="https://ffgpt.huijia.cf/">https://ffgpt.huijia.cf/</a></td><td>否</td></tr><tr><td><a href="https://ai106.com/">https://ai106.com/</a></td><td>否</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;网站&lt;/th&gt;
&lt;th&gt;是否需要 API key&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://chatforai.net/&quot;&gt;https://chatforai.net</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>云存储方案的选择</title>
    <link href="https://schenga39.github.io/hexo-blog/2023/02/27/%E4%BA%91%E5%AD%98%E5%82%A8%E6%96%B9%E6%A1%88%E7%9A%84%E9%80%89%E6%8B%A9/"/>
    <id>https://schenga39.github.io/hexo-blog/2023/02/27/%E4%BA%91%E5%AD%98%E5%82%A8%E6%96%B9%E6%A1%88%E7%9A%84%E9%80%89%E6%8B%A9/</id>
    <published>2023-02-27T16:00:00.000Z</published>
    <updated>2025-07-24T07:27:31.326Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随着互联网的不断发展，越来越多用户选择云存储作为自己的存储方案。相对于存储在本地硬盘上，云存储中的内容能随时查看，更加方便。</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>由于我使用了 Obsidian 作为自己的笔记软件，由于 Obsidian 自带的同步服务每月需要 8 刀实在是一笔巨款，因此用现成的云服务搭建自己的同步方案。</p><p><img src="/hexo-blog/2023/02/27/%E4%BA%91%E5%AD%98%E5%82%A8%E6%96%B9%E6%A1%88%E7%9A%84%E9%80%89%E6%8B%A9/1678110958035.png"></p><p>除了能同步笔记，还可用云服务同步 Zotero 文献库、密码数据库和其他需要跨平台访问的资源。</p><p>综上，我对云服务的要求是同步方便，使用场景主要是图片、文档等小文件。</p><p>各种方案的比较及优缺点如下。</p><h2 id="方案选择历程"><a href="#方案选择历程" class="headerlink" title="方案选择历程"></a>方案选择历程</h2><h3 id="坚果云"><a href="#坚果云" class="headerlink" title="坚果云"></a><a href="https://www.jianguoyun.com/">坚果云</a></h3><p><img src="/hexo-blog/2023/02/27/%E4%BA%91%E5%AD%98%E5%82%A8%E6%96%B9%E6%A1%88%E7%9A%84%E9%80%89%E6%8B%A9/1678110876432.png"></p><p>优点：</p><ul><li>上传下载不限速</li><li>增量同步</li><li>服务器在国内，同步快，体验好</li></ul><p>缺点：</p><ul><li>服务器位于国内，由于审查制度的存在，可能会导致一些文件突然消失</li><li>每月 1G 上传流量，对于大文件的场景可能需要付费购买专业版</li><li>使用 WebDAV 连接时对线程数有要求，超过阈值会暂时 503</li></ul><h3 id="Dropbox"><a href="#Dropbox" class="headerlink" title="Dropbox"></a><a href="https://www.dropbox.com/">Dropbox</a></h3><p><img src="/hexo-blog/2023/02/27/%E4%BA%91%E5%AD%98%E5%82%A8%E6%96%B9%E6%A1%88%E7%9A%84%E9%80%89%E6%8B%A9/1678110903465.jpg"></p><p>优点：</p><ul><li>上传下载不限速</li><li>增量同步</li></ul><p>缺点：</p><ul><li>需要科学上网</li><li>2G 的初始容量捉襟见肘，需要邀请其他用户来获得更多容量（可以购买成品号）</li></ul><h3 id="MEGA"><a href="#MEGA" class="headerlink" title="MEGA"></a><a href="https://mega.nz/">MEGA</a></h3><p><img src="/hexo-blog/2023/02/27/%E4%BA%91%E5%AD%98%E5%82%A8%E6%96%B9%E6%A1%88%E7%9A%84%E9%80%89%E6%8B%A9/1678110909238.png"></p><blockquote><p>MEGA 的主要开发者达康表示 MEGA 使用 AES 进行客户端加密，由于 MEGA 服务器端不知道上传文件的加密密钥，因此无法解密和查看内容。因此，他们不对用户上传文件的内容负责。达康还表示，文件的加密允许他们与世界各地数据托管公司合作，减少政府和 ISP 检测服务器的内容的审查。他在接受 Ars Technica 的采访时提到“每个文件至少分别存储在两个地理位置不同的托管服务器上(Each file will be kept with at least two different hosters [sic], [in] at least two different locations)”“这对我们的好处是显而易见的，就算你可以与最小，最不可靠的托管公司合作也没关系，因为他们无法对存储数据做任何事情(That’s a great added benefit for us because you can work with the smallest, most unreliable [hosting] companies. It doesn’t matter because they can’t do anything with that data.)”。</p><p>—— <a href="https://zh.wikipedia.org/zh-hans/MEGA#%E9%9A%90%E7%A7%81">https://zh.wikipedia.org/zh-hans/MEGA#%E9%9A%90%E7%A7%81</a></p></blockquote><p>MEGA 网盘十分注重用户的隐私，同时上传的文件不会被审查，适合存储对隐私性要求较高的数据。</p><p>优点：</p><ul><li>上传下载不限速</li><li>初始容量 20G，对于笔记、文档等小文件完全够用</li><li>端到端加密，隐私友好</li></ul><p>缺点：</p><ul><li>需要科学上网</li><li>不支持增量同步</li><li>云端文件改动较大时接收客户端会频繁崩溃，体验较差（不知道是否是个例）</li></ul><h2 id="转机"><a href="#转机" class="headerlink" title="转机"></a>转机</h2><p>某一天，在逛 V2EX 论坛的时候，我发现了 Rclone 这个神器，它可以实现命令行管理云存储，也就是说可以编写脚本一键同步到云端或一键下载到本地，极大地简化了同步步骤。另外，配合计划任务还可以实现无感同步。</p><p>Rclone 的功能包括同步、传输、加密、缓存和挂载，支持 Amazon S3（兼容大部分 OSS 对象存储）、Google Drive、Dropbox、OneDrive 等共五十多种云存储服务。</p><p>支持的部分云存储服务如下：</p><div class="code-wrapper"><pre><code class="hljs bash"> 1 / 1Fichier   \ (fichier) 2 / Akamai NetStorage   \ (netstorage) 3 / Alias <span class="hljs-keyword">for</span> an existing remote   \ (<span class="hljs-built_in">alias</span>) 4 / Amazon Drive   \ (amazon cloud drive) 5 / Amazon S3 Compliant Storage Providers   \ (s3) 6 / Backblaze B2   \ (b2) 7 / Better checksums <span class="hljs-keyword">for</span> other remotes   \ (hasher) 8 / Box   \ (box) 9 / Cache a remote   \ (cache)10 / Citrix Sharefile   \ (sharefile)11 / Combine several remotes into one   \ (combine)12 / Compress a remote   \ (compress)13 / Dropbox   \ (dropbox)14 / Encrypt/Decrypt a remote   \ (crypt)15 / Enterprise File Fabric   \ (filefabric)16 / FTP   \ (ftp)17 / Google Cloud Storage (this is not Google Drive)   \ (google cloud storage)18 / Google Drive   \ (drive)19 / Google Photos   \ (google photos)20 / HTTP   \ (http)21 / Hadoop distributed file system   \ (hdfs)22 / HiDrive   \ (hidrive)23 / In memory object storage system.   \ (memory)24 / Internet Archive   \ (internetarchive)25 / Jottacloud   \ (jottacloud)26 / Koofr, Digi Storage and other Koofr-compatible storage providers   \ (koofr)27 / Local Disk   \ (<span class="hljs-built_in">local</span>)28 / Mail.ru Cloud   \ (mailru)29 / Mega   \ (mega)30 / Microsoft Azure Blob Storage   \ (azureblob)31 / Microsoft OneDrive   \ (onedrive)32 / OpenDrive   \ (opendrive)......</code></pre></div><p>到这里，需要找的云产品应该支持 WebDAV 或可在 Rclone 中直接使用，我个人使用过的方案如下。</p><h3 id="Rclone-阿里云对象存储"><a href="#Rclone-阿里云对象存储" class="headerlink" title="Rclone + 阿里云对象存储"></a>Rclone + <a href="https://www.aliyun.com/product/oss">阿里云对象存储</a></h3><p><img src="/hexo-blog/2023/02/27/%E4%BA%91%E5%AD%98%E5%82%A8%E6%96%B9%E6%A1%88%E7%9A%84%E9%80%89%E6%8B%A9/1678111000230.png"></p><p>阿里云对象存储的标准存储方案可使用 Amazon S3 协议添加到 Rclone 中使用，价格为 9 元&#x2F;年，四舍五入等于不花钱。实际使用后我发现由于使用 Rclone 同步文件每次需要比对全部文件，这会产生大量 API 调用，而调用 API 次数每月有限制，会产生额外费用。</p><p>另外，由于是国内的服务，存在审查制度，文件安全性不能得到保障。</p><h3 id="Rclone-OneDrive-Global"><a href="#Rclone-OneDrive-Global" class="headerlink" title="Rclone + OneDrive Global"></a>Rclone + OneDrive Global</h3><p>Rclone 直接支持微软 OneDrive，在客户端中直接输入 client_id 和 client_secret 就可以连接了。</p><p>在使用过程中我发现 OneDrive 对 API 调用有限制，短时间大量请求或大量传输可能会触发限制，出现 <code>The request has been throttled</code>。官方文档中对此问题的说明如下：<a href="https://learn.microsoft.com/en-us/sharepoint/dev/general-development/how-to-avoid-getting-throttled-or-blocked-in-sharepoint-online">https://learn.microsoft.com/en-us/sharepoint/dev/general-development/how-to-avoid-getting-throttled-or-blocked-in-sharepoint-online</a>。</p><p>该问题可以通过使用 Rclone 的 <code>--tpslimit</code> 限制每秒的传输量来解决，但是有没有一种方案能够实现无限制传输呢？</p><h3 id="Rclone-TeraCloud"><a href="#Rclone-TeraCloud" class="headerlink" title="Rclone + TeraCloud"></a>Rclone + TeraCloud</h3><p><img src="/hexo-blog/2023/02/27/%E4%BA%91%E5%AD%98%E5%82%A8%E6%96%B9%E6%A1%88%E7%9A%84%E9%80%89%E6%8B%A9/1678111010836.png"></p><p>这是我目前在使用的方案，在国内不用科学上网即可使用。传输的速度尚可，且支持 WebDAV。注册完成后，可在 <a href="https://teracloud.jp/en/modules/mypage/usage/">https://teracloud.jp/en/modules/mypage/usage/</a> 页面的 App Connections 部分获取 WebDAV 链接、Connection ID 和 Apps Password。</p><p>注册完成后在上面页面输入邀请码：<code>VYJGU</code>，我们都能获得 5GB 的永久免费空间。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;随着互联网的不断发展，越来越多用户选择云存储作为自己的存储方案。相对于存储在本地硬盘上，云存储中的内容能随时查看，更加方便。&lt;/p&gt;
&lt;h2</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>加密公共 DNS 地址汇总</title>
    <link href="https://schenga39.github.io/hexo-blog/2023/01/25/%E5%8A%A0%E5%AF%86%E5%85%AC%E5%85%B1-DNS-%E5%9C%B0%E5%9D%80%E6%B1%87%E6%80%BB/"/>
    <id>https://schenga39.github.io/hexo-blog/2023/01/25/%E5%8A%A0%E5%AF%86%E5%85%AC%E5%85%B1-DNS-%E5%9C%B0%E5%9D%80%E6%B1%87%E6%80%BB/</id>
    <published>2023-01-25T16:00:00.000Z</published>
    <updated>2025-07-24T07:27:31.330Z</updated>
    
    <content type="html"><![CDATA[<h2 id="国内"><a href="#国内" class="headerlink" title="国内"></a>国内</h2><h3 id="阿里"><a href="#阿里" class="headerlink" title="阿里"></a>阿里</h3><p>支持 ECS，即使通过 DoH 访问仍然有污染</p><ul><li>DoH：支持 DoH3<ul><li><a href="https://dns.alidns.com/dns-query">https://dns.alidns.com/dns-query</a></li><li><a href="https://223.5.5.5/dns-query">https://223.5.5.5/dns-query</a></li><li><a href="https://223.6.6.6/dns-query">https://223.6.6.6/dns-query</a></li></ul></li><li>DoT：<code>dns.alidns.com</code></li></ul><h3 id="腾讯"><a href="#腾讯" class="headerlink" title="腾讯"></a>腾讯</h3><p>不完全支持 ECS，有些地址没有解析到最近的服务器</p><ul><li>DoH：不支持 DoH3<ul><li><a href="https://doh.pub/dns-query">https://doh.pub/dns-query</a></li><li><a href="https://120.53.53.53/dns-query">https://120.53.53.53/dns-query</a></li><li><a href="https://1.12.12.12/dns-query">https://1.12.12.12/dns-query</a></li></ul></li><li>DoT：<code>dot.pub</code></li></ul><h3 id="IPv6-DNS"><a href="#IPv6-DNS" class="headerlink" title="IPv6 DNS"></a>IPv6 DNS</h3><p>2025-07-20 更新：已不可用</p><p><del>IPv4 到 IPv6 时代的过渡 DNS，解析准确度与阿里 DNS 相当</del></p><ul><li><del>DoH：不支持 DoH3</del><ul><li><del><a href="https://dns.ipv6dns.com/dns-query">https://dns.ipv6dns.com/dns-query</a></del></li></ul></li><li><del>DoT：<code>dns.ipv6dns.com</code></del></li></ul><h3 id="Easymos-DNS"><a href="#Easymos-DNS" class="headerlink" title="Easymos DNS"></a>Easymos DNS</h3><p>公益 DNS，上游使用国内的阿里和 DNSPod、国外的 Opendns 和 Google DNS 等，国内国外解析效果均可</p><ul><li>DoH：不支持 DoH3<ul><li><a href="https://doh.apad.pro/dns-query">https://doh.apad.pro/dns-query</a></li></ul></li></ul><h3 id="iQDNS"><a href="#iQDNS" class="headerlink" title="iQDNS"></a>iQDNS</h3><p>2025-07-20 更新：已不可用</p><p><del>隐私至上的公益 DNS，可在 <a href="https://iqiq.io/servers.html">https://iqiq.io/servers.html</a> 查看完整服务器列表</del></p><p><del>已知缺点：大概率会将 bilibili 负载均衡域名 <code>i0.hdslb.com</code> 解析到香港导致大陆 bilibili 图片加载缓慢</del></p><ul><li><del>DoH：不支持 DoH3</del><ul><li><del><a href="https://cn-east.iqiqzz.com/dns-query">https://cn-east.iqiqzz.com/dns-query</a></del></li></ul></li><li><del>DoT：<code>cn-east.iqiqzz.com</code></del></li><li><del>DoQ：<code>cn-east.ovo.glass</code></del></li></ul><h3 id="清华-Tuna-DNS"><a href="#清华-Tuna-DNS" class="headerlink" title="清华 Tuna DNS"></a>清华 Tuna DNS</h3><p>不支持 ECS，大多数域名都会解析到北京附近</p><ul><li>DoH：不支持 DoH3<ul><li><a href="https://101.6.6.6:8443/dns-query">https://101.6.6.6:8443/dns-query</a></li></ul></li></ul><h2 id="国外"><a href="#国外" class="headerlink" title="国外"></a>国外</h2><h3 id="Google-DNS"><a href="#Google-DNS" class="headerlink" title="Google DNS"></a>Google DNS</h3><p>支持 ECS</p><ul><li>DoH：支持 DoH3<ul><li><a href="https://dns.google/dns-query">https://dns.google/dns-query</a></li><li><a href="https://8.8.8.8/dns-query">https://8.8.8.8/dns-query</a></li><li><a href="https://8.8.4.4/dns-query">https://8.8.4.4/dns-query</a></li></ul></li><li>DoT：<code>dns.google</code></li></ul><h3 id="Cloudflare-DNS"><a href="#Cloudflare-DNS" class="headerlink" title="Cloudflare DNS"></a>Cloudflare DNS</h3><p>注重隐私，不支持 ECS</p><ul><li>DoH：支持 DoH3<ul><li><a href="https://1dot1dot1dot1.cloudflare-dns.com/">https://1dot1dot1dot1.cloudflare-dns.com</a></li><li><a href="https://1.1.1.1/dns-query">https://1.1.1.1/dns-query</a></li><li><a href="https://1.0.0.1/dns-query">https://1.0.0.1/dns-query</a></li></ul></li><li>DoT：<code>cloudflare-dns.com</code></li></ul><h3 id="OpenDNS"><a href="#OpenDNS" class="headerlink" title="OpenDNS"></a>OpenDNS</h3><p>支持 ECS</p><ul><li>DoH：不支持 DoH3<ul><li><a href="https://doh.opendns.com/dns-query">https://doh.opendns.com/dns-query</a></li></ul></li></ul><h3 id="CleanBrowsing"><a href="#CleanBrowsing" class="headerlink" title="CleanBrowsing"></a>CleanBrowsing</h3><p>支持 ECS</p><ul><li>DoH<ul><li>不屏蔽成人内容：<a href="https://doh.cleanbrowsing.org/doh/security-filter">https://doh.cleanbrowsing.org/doh/security-filter</a></li><li>屏蔽部分成人内容：<a href="https://doh.cleanbrowsing.org/doh/adult-filter">https://doh.cleanbrowsing.org/doh/adult-filter</a></li><li>屏蔽所有成人内容：<a href="https://doh.cleanbrowsing.org/doh/family-filter">https://doh.cleanbrowsing.org/doh/family-filter</a></li></ul></li><li>DoT<ul><li>不屏蔽成人内容：<code>security-filter-dns.cleanbrowsing.org</code></li><li>屏蔽部分成人内容：<code>adult-filter-dns.cleanbrowsing.org</code></li><li>屏蔽所有成人内容：<code>family-filter-dns.cleanbrowsing.org</code></li></ul></li></ul><h3 id="DNS-SB"><a href="#DNS-SB" class="headerlink" title="DNS.SB"></a>DNS.SB</h3><p>注重隐私保护，不支持 ECS</p><ul><li>DoH<ul><li><a href="https://doh.dns.sb/dns-query">https://doh.dns.sb/dns-query</a></li></ul></li></ul><h3 id="AdGuard-DNS"><a href="#AdGuard-DNS" class="headerlink" title="AdGuard DNS"></a>AdGuard DNS</h3><ul><li>DoH<ul><li>过滤广告：<a href="https://dns.adguard.com/dns-query">https://dns.adguard.com/dns-query</a></li><li>家庭保护：<a href="https://dns-family.adguard.com/dns-query">https://dns-family.adguard.com/dns-query</a></li><li>不过滤：<a href="https://dns-unfiltered.adguard.com/dns-query">https://dns-unfiltered.adguard.com/dns-query</a></li></ul></li><li>DoT &#x2F; DoQ<ul><li>过滤广告：<code>dns.adguard.com</code></li><li>家庭保护：<code>dns-family.adguard.com</code></li><li>不过滤：<code>dns-unfiltered.adguard.com</code></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;国内&quot;&gt;&lt;a href=&quot;#国内&quot; class=&quot;headerlink&quot; title=&quot;国内&quot;&gt;&lt;/a&gt;国内&lt;/h2&gt;&lt;h3 id=&quot;阿里&quot;&gt;&lt;a href=&quot;#阿里&quot; class=&quot;headerlink&quot; title=&quot;阿里&quot;&gt;&lt;/a&gt;阿里&lt;/h3&gt;&lt;p&gt;支持 </summary>
      
    
    
    
    
    <category term="隐私保护" scheme="https://schenga39.github.io/hexo-blog/tags/%E9%9A%90%E7%A7%81%E4%BF%9D%E6%8A%A4/"/>
    
    <category term="DNS" scheme="https://schenga39.github.io/hexo-blog/tags/DNS/"/>
    
  </entry>
  
  <entry>
    <title>使用 Mosdns 搭建本地无污染 DNS</title>
    <link href="https://schenga39.github.io/hexo-blog/2023/01/16/%E4%BD%BF%E7%94%A8-Mosdns-%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E6%97%A0%E6%B1%A1%E6%9F%93-DNS/"/>
    <id>https://schenga39.github.io/hexo-blog/2023/01/16/%E4%BD%BF%E7%94%A8-Mosdns-%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E6%97%A0%E6%B1%A1%E6%9F%93-DNS/</id>
    <published>2023-01-16T16:00:00.000Z</published>
    <updated>2025-07-24T07:27:31.327Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>国内 DNS 污染越来越严重，特别是移动宽带，运营商分配的 DNS 在解析很多境外网站时会得到污染的结果或直接返回 127.0.0.1（例如 aka.ms）从而导致代理软件失效。虽然上述问题可以在代理软件中使用分流解决，但在本地搭建 DNS 不仅可以实现分流，更可实现部分广告过滤和缓存功能，极大提升了网页浏览体验。</p><p><img src="/hexo-blog/2023/01/16/%E4%BD%BF%E7%94%A8-Mosdns-%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E6%97%A0%E6%B1%A1%E6%9F%93-DNS/1673951344719.png"></p><h2 id="无污染-DNS-实现原理"><a href="#无污染-DNS-实现原理" class="headerlink" title="无污染 DNS 实现原理"></a>无污染 DNS 实现原理</h2><p>全部 DNS 请求均使用境外无污染 DNS 会导致本地域名解析速度偏慢，且在使用 ECS 的情况下准确度不如国内 DNS，若使用本地 DNS 服务端进行分流则可以兼备快速和准确的优点。</p><h2 id="要实现的目标"><a href="#要实现的目标" class="headerlink" title="要实现的目标"></a>要实现的目标</h2><ol><li>DNS 解析结果无污染</li><li>国内外按域名和 IP 分流</li><li>支持 ECS，能解析到距离最近的 CDN 服务器</li><li>延迟尽可能低</li><li>最好全程使用加密 DNS（DoT、DoH、DoQ 等）</li></ol><h2 id="上游-DNS-选择"><a href="#上游-DNS-选择" class="headerlink" title="上游 DNS 选择"></a>上游 DNS 选择</h2><p>国内 DNS 的选择方面，经过测试发现，使用腾讯 DNS 在国内的出口在广东，解析出的地址不是我所在地区的最优地址，而阿里 DNS 就没有这个问题。</p><p>国外的 DNS 选择 GoogleDNS 和 EasymosDNS 作为上游，EasymosDNS 的上游使用国内阿里 DNS、腾讯的 DNSPod 和国外的 GoogleDNS、OpenDNS 等，搭配 ECS 可实现国外正确解析到距离最近的 CDN。</p><h2 id="分流原理"><a href="#分流原理" class="headerlink" title="分流原理"></a>分流原理</h2><p>由于 mosdns 支持 v2ray 的 dat 文件，因此可直接使用 geoip.dat 匹配 IP 地址，使用 geosite.dat 匹配域名。</p><p>在广告过滤方面，可直接使用 <code>geosite:category-ads-all</code> 进行过滤，也可添加常见的广告过滤规则。这里广告过滤规则只支持域名，示例文件如下：</p><div class="code-wrapper"><pre><code class="hljs txt">example-ad1.comexample-ad2.com</code></pre></div><p>我使用了 oisd 的 <a href="https://dbl.oisd.nl/basic">basic 过滤列表</a>，更多列表可在 <a href="https://oisd.nl/downloads">https://oisd.nl/downloads</a> 中查看。</p><h2 id="DNS-请求处理流程"><a href="#DNS-请求处理流程" class="headerlink" title="DNS 请求处理流程"></a>DNS 请求处理流程</h2><ol><li>查询 hosts 文件匹配域名</li><li>查询缓存</li><li>屏蔽类型为 65 的 DNS 请求：返回 127.0.0.1（<a href="https://www.v2ex.com/t/712074">为什么要屏蔽？</a>）</li><li>屏蔽广告域名：返回 NXDOMAIN</li><li>通过域名匹配网址，若匹配到则可第一次分流</li><li>从无污染服务器获取域名 IP，通过 IP 分流，此时可能出现以下情况<ul><li>获取到的 IP 是国外的 IP 则直接返回结果即可</li><li>获取的 IP 是国内 IP 或获取到国内有服务器的 CDN 厂商：将请求通过本地服务器再次解析并返回结果，此时又分为两种情况<ul><li>从国内服务器获取到了被污染的 IP 或使用国内服务器解析出的 IP 不是境内的 IP 则将请求再次交给国外无污染服务器处理</li><li>获取到的 IP 不满足上一条的则直接返回</li></ul></li></ul></li></ol><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>个人使用的配置文件如下：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment">######### 日志文件存放位置 #########</span><span class="hljs-attr">log:</span>  <span class="hljs-attr">file:</span> <span class="hljs-string">&quot;./mosdns.log&quot;</span>  <span class="hljs-attr">level:</span> <span class="hljs-string">error</span><span class="hljs-comment">######### 数据源, 在这里声明规则文件 #########</span><span class="hljs-attr">data_providers:</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">tag:</span> <span class="hljs-string">geosite</span>    <span class="hljs-attr">file:</span> <span class="hljs-string">./rule/geosite.dat</span>    <span class="hljs-attr">auto_reload:</span> <span class="hljs-literal">true</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">tag:</span> <span class="hljs-string">gfwip</span>    <span class="hljs-attr">file:</span> <span class="hljs-string">./rule/gfw_ip_list.txt</span>    <span class="hljs-attr">auto_reload:</span> <span class="hljs-literal">true</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">tag:</span> <span class="hljs-string">cdncn</span>    <span class="hljs-attr">file:</span> <span class="hljs-string">./rule/cdn_domain_list.txt</span>    <span class="hljs-attr">auto_reload:</span> <span class="hljs-literal">true</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">tag:</span> <span class="hljs-string">cn</span>    <span class="hljs-attr">file:</span> <span class="hljs-string">./rule/cn.dat</span>    <span class="hljs-attr">auto_reload:</span> <span class="hljs-literal">true</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">tag:</span> <span class="hljs-string">force_cn</span>    <span class="hljs-attr">file:</span> <span class="hljs-string">./rule/ecs_cn_domain.txt</span>    <span class="hljs-attr">auto_reload:</span> <span class="hljs-literal">true</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">tag:</span> <span class="hljs-string">force_us</span>    <span class="hljs-attr">file:</span> <span class="hljs-string">./rule/ecs_us_domain.txt</span>    <span class="hljs-attr">auto_reload:</span> <span class="hljs-literal">true</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">tag:</span> <span class="hljs-string">hosts</span>    <span class="hljs-attr">file:</span> <span class="hljs-string">./rule/hosts.txt</span>    <span class="hljs-attr">auto_reload:</span> <span class="hljs-literal">true</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">tag:</span> <span class="hljs-string">oisd_dbl_basic</span>    <span class="hljs-attr">file:</span> <span class="hljs-string">./rule/oisd_dbl_basic.txt</span>    <span class="hljs-attr">auto_reload:</span> <span class="hljs-literal">true</span><span class="hljs-comment">######### 插件 #########</span><span class="hljs-attr">plugins:</span>  <span class="hljs-comment"># 缓存</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">tag:</span> <span class="hljs-string">cache</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">cache</span>    <span class="hljs-attr">args:</span>      <span class="hljs-attr">size:</span> <span class="hljs-number">102400</span>      <span class="hljs-attr">lazy_cache_ttl:</span> <span class="hljs-number">86400</span>      <span class="hljs-attr">cache_everything:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># hosts</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">tag:</span> <span class="hljs-string">hosts</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">hosts</span>    <span class="hljs-attr">args:</span>      <span class="hljs-attr">hosts:</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;provider:hosts&quot;</span>  <span class="hljs-comment"># 调整 ECS</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">tag:</span> <span class="hljs-string">ecs_remote</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">ecs</span>    <span class="hljs-attr">args:</span>      <span class="hljs-attr">auto:</span> <span class="hljs-literal">false</span>      <span class="hljs-attr">ipv4:</span> <span class="hljs-string">&quot;代理服务器公网 IP&quot;</span>      <span class="hljs-attr">mask4:</span> <span class="hljs-number">24</span>      <span class="hljs-attr">force_overwrite:</span> <span class="hljs-literal">true</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">tag:</span> <span class="hljs-string">ecs_local</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">ecs</span>    <span class="hljs-attr">args:</span>      <span class="hljs-attr">auto:</span> <span class="hljs-literal">false</span>      <span class="hljs-attr">ipv4:</span> <span class="hljs-string">&quot;本地公网 IP&quot;</span>      <span class="hljs-attr">mask4:</span> <span class="hljs-number">24</span>      <span class="hljs-attr">force_overwrite:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 调整 TTL</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">tag:</span> <span class="hljs-string">ttl_long</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">ttl</span>    <span class="hljs-attr">args:</span>      <span class="hljs-attr">minimal_ttl:</span> <span class="hljs-number">300</span>      <span class="hljs-attr">maximum_ttl:</span> <span class="hljs-number">3600</span>  <span class="hljs-comment"># TYPE65 类型请求</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">tag:</span> <span class="hljs-string">qtype65</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">query_matcher</span>    <span class="hljs-attr">args:</span>      <span class="hljs-attr">qtype:</span> [<span class="hljs-number">65</span>]  <span class="hljs-comment"># PTR 类型请求</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">tag:</span> <span class="hljs-string">query_is_ptr</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">query_matcher</span>    <span class="hljs-attr">args:</span>      <span class="hljs-attr">qtype:</span> [<span class="hljs-number">12</span>]  <span class="hljs-comment"># 屏蔽请求</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">tag:</span> <span class="hljs-string">black_hole</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">blackhole</span>    <span class="hljs-attr">args:</span>      <span class="hljs-attr">rcode:</span> <span class="hljs-number">0</span>      <span class="hljs-attr">ipv4:</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span>      <span class="hljs-attr">ipv6:</span> <span class="hljs-string">&quot;::1&quot;</span>  <span class="hljs-comment"># 转发请求给阿里 DNS</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">tag:</span> <span class="hljs-string">forward_ali</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">fast_forward</span>    <span class="hljs-attr">args:</span>      <span class="hljs-attr">upstream:</span>        <span class="hljs-bullet">-</span> <span class="hljs-attr">addr:</span> <span class="hljs-string">&quot;tls://223.5.5.5&quot;</span>          <span class="hljs-attr">trusted:</span> <span class="hljs-literal">true</span>          <span class="hljs-attr">enable_pipeline:</span> <span class="hljs-literal">true</span>        <span class="hljs-bullet">-</span> <span class="hljs-attr">addr:</span> <span class="hljs-string">&quot;tls://223.6.6.6&quot;</span>          <span class="hljs-attr">trusted:</span> <span class="hljs-literal">true</span>          <span class="hljs-attr">enable_pipeline:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 转发请求给 Google DNS</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">tag:</span> <span class="hljs-string">forward_google</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">fast_forward</span>    <span class="hljs-attr">args:</span>      <span class="hljs-attr">upstream:</span>        <span class="hljs-bullet">-</span> <span class="hljs-attr">addr:</span> <span class="hljs-string">&quot;tls://8.8.4.4&quot;</span>          <span class="hljs-attr">trusted:</span> <span class="hljs-literal">true</span>          <span class="hljs-attr">enable_pipeline:</span> <span class="hljs-literal">true</span>        <span class="hljs-bullet">-</span> <span class="hljs-attr">addr:</span> <span class="hljs-string">&quot;https://dns.google/dns-query&quot;</span>          <span class="hljs-attr">dial_addr:</span> <span class="hljs-string">&quot;2001:4860:4860::8888&quot;</span>          <span class="hljs-attr">trusted:</span> <span class="hljs-literal">true</span>          <span class="hljs-attr">enable_pipeline:</span> <span class="hljs-literal">true</span>          <span class="hljs-attr">enable_http3:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 转发请求给 iQDNS</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">tag:</span> <span class="hljs-string">forward_iqdns</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">fast_forward</span>    <span class="hljs-attr">args:</span>      <span class="hljs-attr">upstream:</span>        <span class="hljs-bullet">-</span> <span class="hljs-attr">addr:</span> <span class="hljs-string">&quot;https://cn-east.lele233.com/dns-query&quot;</span>          <span class="hljs-attr">dial_addr:</span> <span class="hljs-string">&quot;112.132.212.159&quot;</span>          <span class="hljs-attr">trusted:</span> <span class="hljs-literal">true</span>          <span class="hljs-attr">enable_pipeline:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 转发请求给 EasyMos DNS</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">tag:</span> <span class="hljs-string">forward_easymos</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">forward</span>    <span class="hljs-attr">args:</span>      <span class="hljs-attr">upstream:</span>        <span class="hljs-bullet">-</span> <span class="hljs-attr">addr:</span> <span class="hljs-string">&quot;https://doh.apad.pro/cn-query&quot;</span>      <span class="hljs-attr">bootstrap:</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;119.29.29.29&quot;</span>  <span class="hljs-comment"># 并行转发至本地服务器</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">tag:</span> <span class="hljs-string">forward_local</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">sequence</span>    <span class="hljs-attr">args:</span>      <span class="hljs-attr">exec:</span>        <span class="hljs-bullet">-</span> <span class="hljs-attr">parallel:</span>            <span class="hljs-bullet">-</span> <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;forward_ali&quot;</span>            <span class="hljs-bullet">-</span> <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;forward_iqdns&quot;</span>  <span class="hljs-comment"># 并行转发至远程无污染服务器</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">tag:</span> <span class="hljs-string">forward_remote</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">sequence</span>    <span class="hljs-attr">args:</span>      <span class="hljs-attr">exec:</span>        <span class="hljs-bullet">-</span> <span class="hljs-attr">parallel:</span>            <span class="hljs-bullet">-</span> <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;forward_google&quot;</span>            <span class="hljs-bullet">-</span> <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;forward_easymos&quot;</span>  <span class="hljs-comment"># 匹配 CDN 域名</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">tag:</span> <span class="hljs-string">query_is_cdn_cn_domain</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">query_matcher</span>    <span class="hljs-attr">args:</span>      <span class="hljs-attr">domain:</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;provider:cdncn&quot;</span>  <span class="hljs-comment"># 匹配 本地域名</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">tag:</span> <span class="hljs-string">query_is_local_domain</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">query_matcher</span>    <span class="hljs-attr">args:</span>      <span class="hljs-attr">domain:</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;provider:geosite:cn,private,apple-cn,steam@cn,google-cn,category-games@cn&quot;</span>  <span class="hljs-comment"># 匹配 地址非中国的域名</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">tag:</span> <span class="hljs-string">query_is_non_local_domain</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">query_matcher</span>    <span class="hljs-attr">args:</span>      <span class="hljs-attr">domain:</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;provider:geosite:geolocation-!cn&quot;</span>  <span class="hljs-comment"># 匹配 广告域名</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">tag:</span> <span class="hljs-string">query_is_ad_domain</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">query_matcher</span>    <span class="hljs-attr">args:</span>      <span class="hljs-attr">domain:</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;provider:oisd_dbl_basic&quot;</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;provider:geosite:category-ads-all&quot;</span>  <span class="hljs-comment"># 强制本地解析: 可在 ./rule/ecs_cn_domain.txt 文件中添加域名</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">tag:</span> <span class="hljs-string">query_is_cn_domain</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">query_matcher</span>    <span class="hljs-attr">args:</span>      <span class="hljs-attr">domain:</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;provider:force_cn&quot;</span>  <span class="hljs-comment"># 强制非本地解析: 可在 ./rule/ecs_us_domain.txt 文件中添加域名</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">tag:</span> <span class="hljs-string">query_is_us_domain</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">query_matcher</span>    <span class="hljs-attr">args:</span>      <span class="hljs-attr">domain:</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;provider:force_us&quot;</span>  <span class="hljs-comment"># 结果有本地 IP</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">tag:</span> <span class="hljs-string">response_has_local_ip</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">response_matcher</span>    <span class="hljs-attr">args:</span>      <span class="hljs-attr">ip:</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;provider:cn:cn&quot;</span>  <span class="hljs-comment"># 匹配 Akamai 的 CDN 域名</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">tag:</span> <span class="hljs-string">response_cname_akamai</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">response_matcher</span>    <span class="hljs-attr">args:</span>      <span class="hljs-attr">cname:</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;akamaiedge.net&quot;</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;akadns.net&quot;</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;edgekey.net&quot;</span>  <span class="hljs-comment"># 匹配被污染 IP</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">tag:</span> <span class="hljs-string">response_has_gfw_ip</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">response_matcher</span>    <span class="hljs-attr">args:</span>      <span class="hljs-attr">ip:</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;provider:gfwip&quot;</span>  <span class="hljs-comment"># 主要运行逻辑</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">tag:</span> <span class="hljs-string">main_sequence</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">sequence</span>    <span class="hljs-attr">args:</span>      <span class="hljs-attr">exec:</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">hosts</span> <span class="hljs-comment"># 域名映射 IP</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">cache</span> <span class="hljs-comment"># 缓存</span>        <span class="hljs-comment"># 屏蔽 TYPE65 类型请求并拦截广告</span>        <span class="hljs-bullet">-</span> <span class="hljs-attr">if:</span> <span class="hljs-string">&quot;qtype65&quot;</span>          <span class="hljs-attr">exec:</span>            <span class="hljs-bullet">-</span> <span class="hljs-string">black_hole</span>            <span class="hljs-bullet">-</span> <span class="hljs-string">_return</span>        <span class="hljs-comment"># 屏蔽广告域名</span>        <span class="hljs-bullet">-</span> <span class="hljs-attr">if:</span> <span class="hljs-string">query_is_ad_domain</span>          <span class="hljs-attr">exec:</span>            <span class="hljs-bullet">-</span> <span class="hljs-string">_new_nxdomain_response</span>            <span class="hljs-bullet">-</span> <span class="hljs-string">_return</span>        <span class="hljs-comment"># 本地解析: 强制本地解析、PTR 请求、本地域名、CDN 域名、akamai 节点</span>        <span class="hljs-bullet">-</span> <span class="hljs-attr">if:</span> <span class="hljs-string">&quot;(query_is_cn_domain) || [query_is_ptr] || (query_is_local_domain) || (query_is_cdn_cn_domain) || (response_cname_akamai)&quot;</span>          <span class="hljs-attr">exec:</span>            <span class="hljs-bullet">-</span> <span class="hljs-string">ecs_local</span>            <span class="hljs-bullet">-</span> <span class="hljs-string">forward_local</span>            <span class="hljs-bullet">-</span> <span class="hljs-string">_return</span>        <span class="hljs-comment"># 非本地解析: 强制非本地解析、位置非中国的域名</span>        <span class="hljs-bullet">-</span> <span class="hljs-attr">if:</span> <span class="hljs-string">&quot;(query_is_us_domain) || (query_is_non_local_domain)&quot;</span>          <span class="hljs-attr">exec:</span>            <span class="hljs-bullet">-</span> <span class="hljs-string">_prefer_ipv4</span>            <span class="hljs-bullet">-</span> <span class="hljs-string">ecs_remote</span>            <span class="hljs-bullet">-</span> <span class="hljs-string">forward_remote</span>            <span class="hljs-bullet">-</span> <span class="hljs-string">ttl_long</span>            <span class="hljs-bullet">-</span> <span class="hljs-string">_return</span>        <span class="hljs-comment"># 未知域名 IP 分流</span>        <span class="hljs-comment"># 远程获取应答, 丢弃本地 IP 结果</span>        <span class="hljs-bullet">-</span> <span class="hljs-attr">primary:</span>            <span class="hljs-bullet">-</span> <span class="hljs-string">_prefer_ipv4</span>            <span class="hljs-bullet">-</span> <span class="hljs-string">ecs_remote</span>            <span class="hljs-bullet">-</span> <span class="hljs-string">forward_remote</span>            <span class="hljs-bullet">-</span> <span class="hljs-attr">if:</span> <span class="hljs-string">&quot;(response_has_local_ip) || (response_cname_akamai)&quot;</span>              <span class="hljs-attr">exec:</span>                <span class="hljs-bullet">-</span> <span class="hljs-string">_drop_response</span>          <span class="hljs-comment"># 本地获取应答</span>          <span class="hljs-attr">secondary:</span>            <span class="hljs-bullet">-</span> <span class="hljs-string">ecs_local</span>            <span class="hljs-bullet">-</span> <span class="hljs-string">forward_local</span>            <span class="hljs-bullet">-</span> <span class="hljs-attr">if:</span> <span class="hljs-string">&quot;(! response_has_local_ip) &amp;&amp; [_response_valid_answer] || (response_has_gfw_ip)&quot;</span>              <span class="hljs-attr">exec:</span>                <span class="hljs-bullet">-</span> <span class="hljs-string">_prefer_ipv4</span>                <span class="hljs-bullet">-</span> <span class="hljs-string">ecs_remote</span>                <span class="hljs-bullet">-</span> <span class="hljs-string">forward_remote</span>                <span class="hljs-bullet">-</span> <span class="hljs-string">ttl_long</span>          <span class="hljs-comment"># 避免 DNS 泄漏</span>          <span class="hljs-attr">fast_fallback:</span> <span class="hljs-number">2500</span>          <span class="hljs-attr">always_standby:</span> <span class="hljs-literal">false</span><span class="hljs-comment">######### 监听地址 #########</span><span class="hljs-attr">servers:</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">exec:</span> <span class="hljs-string">main_sequence</span>    <span class="hljs-attr">timeout:</span> <span class="hljs-number">5</span>    <span class="hljs-attr">listeners:</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">protocol:</span> <span class="hljs-string">udp</span>        <span class="hljs-attr">addr:</span> <span class="hljs-string">&quot;127.0.0.1:53&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">protocol:</span> <span class="hljs-string">udp</span>        <span class="hljs-attr">addr:</span> <span class="hljs-string">&quot;[::1]:53&quot;</span></code></pre></div><h2 id="测试本地-DNS-运行情况"><a href="#测试本地-DNS-运行情况" class="headerlink" title="测试本地 DNS 运行情况"></a>测试本地 DNS 运行情况</h2><p>使用 <a href="https://github.com/natesales/q">q</a> 作为测试工具，支持 UDP、TCP、DoT、DoH、DoQ 等协议，同时支持设置 ECS。</p><h3 id="国内网站解析测试"><a href="#国内网站解析测试" class="headerlink" title="国内网站解析测试"></a>国内网站解析测试</h3><p>选用浙江电信 202.101.172.35 作为 ECS 地址进行测试。</p><ol><li><p><a href="https://www.iqiyi.com/">爱奇艺</a></p><p><img src="/hexo-blog/2023/01/16/%E4%BD%BF%E7%94%A8-Mosdns-%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E6%97%A0%E6%B1%A1%E6%9F%93-DNS/1673953706420.png"></p><ul><li>仅用 32ms 返回结果，解析到了武汉机房</li></ul></li><li><p>bilibili 负载均衡域名：<code>i0.hdslb.com</code>、<code>i1.hdslb.com</code>、<code>s1.hdslb.com</code></p><p><img src="/hexo-blog/2023/01/16/%E4%BD%BF%E7%94%A8-Mosdns-%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E6%97%A0%E6%B1%A1%E6%9F%93-DNS/1673953829048.png"></p><p><img src="/hexo-blog/2023/01/16/%E4%BD%BF%E7%94%A8-Mosdns-%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E6%97%A0%E6%B1%A1%E6%9F%93-DNS/1673953833412.png"></p><p><img src="/hexo-blog/2023/01/16/%E4%BD%BF%E7%94%A8-Mosdns-%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E6%97%A0%E6%B1%A1%E6%9F%93-DNS/1673953836246.png"></p><ul><li>可以看到均能正确解析，且解析时间均在 30ms 左右，非常快</li><li>IPv4 解析结果均在浙江邻省，可认为 ECS 正常发挥作用</li></ul></li><li><p><a href="https://www.oschina.net/">开源中国</a><br><img src="/hexo-blog/2023/01/16/%E4%BD%BF%E7%94%A8-Mosdns-%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E6%97%A0%E6%B1%A1%E6%9F%93-DNS/1673953912020.png"></p><ul><li>解析到了上海，且解析速度较快</li></ul></li></ol><h3 id="国外网站解析测试"><a href="#国外网站解析测试" class="headerlink" title="国外网站解析测试"></a>国外网站解析测试</h3><ol><li><p>Google 系网站，以 google.com 为例</p><p><img src="/hexo-blog/2023/01/16/%E4%BD%BF%E7%94%A8-Mosdns-%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E6%97%A0%E6%B1%A1%E6%9F%93-DNS/1673951541023.png"></p><p><img src="/hexo-blog/2023/01/16/%E4%BD%BF%E7%94%A8-Mosdns-%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E6%97%A0%E6%B1%A1%E6%9F%93-DNS/1673951613279.png"></p><ul><li>均在 180ms 以内得到正确的解析结果，且解析到了距离洛杉矶代理服务器最近的地点</li></ul></li><li><p><a href="https://www.reddit.com/">维基百科</a></p><p><img src="/hexo-blog/2023/01/16/%E4%BD%BF%E7%94%A8-Mosdns-%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E6%97%A0%E6%B1%A1%E6%9F%93-DNS/1673951686762.png"></p><p><img src="/hexo-blog/2023/01/16/%E4%BD%BF%E7%94%A8-Mosdns-%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E6%97%A0%E6%B1%A1%E6%9F%93-DNS/1673951689851.png"></p><ul><li>解析延迟在可接受的范围内</li></ul></li><li><p><a href="https://github.com/">GitHub</a></p><p><img src="/hexo-blog/2023/01/16/%E4%BD%BF%E7%94%A8-Mosdns-%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E6%97%A0%E6%B1%A1%E6%9F%93-DNS/1673951957703.png"></p><p><img src="/hexo-blog/2023/01/16/%E4%BD%BF%E7%94%A8-Mosdns-%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E6%97%A0%E6%B1%A1%E6%9F%93-DNS/1673951964166.png"></p><ul><li>200ms 以内得出正确的解析结果，ping 延迟可接受</li></ul></li><li><p>CloudFlare CDN：以 <a href="https://www.v2ex.com/">v2ex 论坛</a> 为例</p><p><img src="/hexo-blog/2023/01/16/%E4%BD%BF%E7%94%A8-Mosdns-%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E6%97%A0%E6%B1%A1%E6%9F%93-DNS/1673951994369.png"></p><p><img src="/hexo-blog/2023/01/16/%E4%BD%BF%E7%94%A8-Mosdns-%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E6%97%A0%E6%B1%A1%E6%9F%93-DNS/1673952002358.png"></p><ul><li>解析用时可接受，由于 Anycast 技术，在各个地方延迟均非常低</li></ul></li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://irine-sistiana.gitbook.io/mosdns-wiki/mosdns-v4/ru-he-pei-zhi-mosdns">mosdns 官方文档</a></li><li><a href="https://jasper1024.com/jasper/20211223034622">Jasper 的博客</a></li><li><a href="https://github.com/pmkol/easymosdns">EasymosDNS</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;国内 DNS 污染越来越严重，特别是移动宽带，运营商分配的 DNS 在解析很多境外网站时会得到污染的结果或直接返回 127.0.0.1（例如</summary>
      
    
    
    
    
    <category term="隐私保护" scheme="https://schenga39.github.io/hexo-blog/tags/%E9%9A%90%E7%A7%81%E4%BF%9D%E6%8A%A4/"/>
    
    <category term="DNS" scheme="https://schenga39.github.io/hexo-blog/tags/DNS/"/>
    
    <category term="科学上网" scheme="https://schenga39.github.io/hexo-blog/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>Obsidian DataviewJS 插件使用实例</title>
    <link href="https://schenga39.github.io/hexo-blog/2022/12/31/Obsidian-DataviewJS-%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E5%AE%9E%E4%BE%8B/"/>
    <id>https://schenga39.github.io/hexo-blog/2022/12/31/Obsidian-DataviewJS-%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E5%AE%9E%E4%BE%8B/</id>
    <published>2022-12-31T16:00:00.000Z</published>
    <updated>2025-07-24T07:27:31.323Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Obsidian 是一个功能强大的笔记应用程序，越来越多的用户选择使用它来记录自己的思想、保存自己的笔记。它支持最近很火的双链功能，能在任意页面之间建立连接，最终形成知识网络。也可以不使用它的双链功能，只将其作为我们的个人知识管理库。<br>作为一款开源软件，Obsidian 的社区非常活跃，用户自己同时作为开发者在不断开发新的插件来扩展 Obsidian 的功能。其中一个非常有用的插件是 Dataview，它可以让用户使用 Markdown 文件中的数据来创建自定义视图和列表等。使用 Dataview，我们可以轻松地汇总、分析和可视化笔记中的数据。</p><p>Dataview 的另一个优点是可以通过简单的标记语言来过滤数据，使得用户可以快速、准确地找到他们需要的信息。这些标记可以使用类似 SQL 的语言进行编写，甚至支持自定义 JavaScript 函数来进一步扩展功能。</p><p>如果你是一个需要从海量笔记中快速获取信息的人，那么 Dataview 将是非常值得尝试的插件。本文中，我们将重点介绍它的使用和功能，同时也会分享一些我自己的使用经验和技巧。</p><h2 id="Dataview-Query-Language"><a href="#Dataview-Query-Language" class="headerlink" title="Dataview Query Language"></a>Dataview Query Language</h2><p>虽然本文讨论的是 Dataview 中的 JavaScript，但是还是简要介绍一下 Dataview 中的 Query Language。</p><p>一个完整的 Dataview 查询包括以下要素</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-operator">&lt;</span>QUERY<span class="hljs-operator">-</span>TYPE<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>fields<span class="hljs-operator">&gt;</span><span class="hljs-keyword">FROM</span> <span class="hljs-operator">&lt;</span>source<span class="hljs-operator">&gt;</span><span class="hljs-operator">&lt;</span>DATA<span class="hljs-operator">-</span>COMMAND<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>expression<span class="hljs-operator">&gt;</span><span class="hljs-operator">&lt;</span>DATA<span class="hljs-operator">-</span>COMMAND<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>expression<span class="hljs-operator">&gt;</span>        ...</code></pre></div><ul><li>QUERY-TYPE 可以为 LIST、TASK、CALENDAR、TABLE</li><li>fileds 是要查询的字段</li><li>source 是数据来源，类似于 SQL 要查询的表</li><li>DATA-COMMAND 是对数据的限制条件<br>Dataview 使用示例：例如要查询当前笔记（Markdown 文件）同级目录下的 Books 文件夹中的所有文件并按照创建时间降序排序，可编写 Dataview 查询如下：</li></ul><div class="code-wrapper"><pre><code class="hljs sql">LIST<span class="hljs-keyword">FROM</span> &quot;Books&quot;SORT file.ctime <span class="hljs-keyword">DESC</span></code></pre></div><p>如果我们要在此基础上加一点限制条件，例如文件中含有 <code>#致用</code> 标签的文件，则可以使用如下查询语句：</p><div class="code-wrapper"><pre><code class="hljs sql">LIST<span class="hljs-keyword">FROM</span> &quot;Books&quot;SORT file.ctime <span class="hljs-keyword">DESC</span><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">contains</span>(tags, &quot;#致用&quot;)</code></pre></div><p>更多示例可参考官方文档中关于 <a href="https://blacksmithgu.github.io/obsidian-dataview/queries/structure/">Query Language</a> 的介绍。</p><h2 id="DataviewJS"><a href="#DataviewJS" class="headerlink" title="DataviewJS"></a>DataviewJS</h2><p>尽管 Dataview Query Language 能满足绝大部分需求，在部分场景下，我们希望能自定义查询。下面我们从具体实例出发，使用 DataviewJS 完成不同自定义任务。</p><h3 id="为指定名称文件夹内的文件编制索引"><a href="#为指定名称文件夹内的文件编制索引" class="headerlink" title="为指定名称文件夹内的文件编制索引"></a>为指定名称文件夹内的文件编制索引</h3><p>如果我们想查询当前文件夹下与当前文件名相同的文件夹内的所有文件，假设我们的文件目录如下：</p><div class="code-wrapper"><pre><code class="hljs plaintext">├─ 离散数学.md└─ 离散数学　　 ├─ 01 命题逻辑.md　　 ├─ 02 谓词逻辑.md　　 ├─ 03 集合与关系.md　　 ├─ 04 函数.md　　 ├─ 05 代数系统.md　　 └─ 06 图和树.md</code></pre></div><p>我们希望使用 <code>离散数学.md</code> 为文件夹内的文件的索引，并按照序号排序，则可编写 DataviewJS 如下：</p><div class="code-wrapper"><pre><code class="hljs jsx"><span class="hljs-comment">// 获取当前文件名</span><span class="hljs-keyword">const</span> fileName = dv.<span class="hljs-title function_">current</span>().<span class="hljs-property">file</span>.<span class="hljs-property">name</span>;<span class="hljs-comment">// 提取文件前缀编号: 例如 01、02、03...</span><span class="hljs-keyword">const</span> fileIndex = fileName.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>);<span class="hljs-comment">// 获取文件所在文件夹</span><span class="hljs-keyword">let</span> path = dv.<span class="hljs-title function_">current</span>().<span class="hljs-property">file</span>.<span class="hljs-property">folder</span>;<span class="hljs-comment">// 如果文件不在根目录则在目录后加上路径分隔符</span><span class="hljs-keyword">if</span> (path) path += <span class="hljs-string">&quot;/&quot;</span>;<span class="hljs-comment">// 如果文件有编号则子文件夹为编号命名, 否则与该文件相同</span><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">isNaN</span>(<span class="hljs-built_in">parseInt</span>(fileIndex))) path += fileIndex;<span class="hljs-keyword">else</span> path += fileName;<span class="hljs-comment">// 使用 list 将结果返回</span>dv.<span class="hljs-title function_">list</span>(  dv    <span class="hljs-comment">// 根据官方文档, 路径两边的双引号应该保留</span>    .<span class="hljs-title function_">pages</span>(<span class="hljs-string">`&quot;<span class="hljs-subst">$&#123;path&#125;</span>&quot;`</span>)    <span class="hljs-comment">// 只查询一级子目录下的文档</span>    .<span class="hljs-title function_">where</span>(<span class="hljs-function">(<span class="hljs-params">p</span>) =&gt;</span> p.<span class="hljs-property">file</span>.<span class="hljs-property">folder</span> === path)    <span class="hljs-comment">// 按照文件名升序排序</span>    .<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> c.<span class="hljs-property">file</span>.<span class="hljs-property">name</span>).<span class="hljs-property">file</span>.<span class="hljs-property">link</span>);</code></pre></div><p>得到的结果与预期相符。</p><h3 id="为会议记录编制清单"><a href="#为会议记录编制清单" class="headerlink" title="为会议记录编制清单"></a>为会议记录编制清单</h3><p>为了实现编程读取文件名中的日期，我们需要将所有会议记录文件按照格式 <code>年月日_会议主题</code> 来命名，例如 <code>20220422_软件组会</code>，然后我们就可以在会议文件夹所在目录下建立与会议文件夹同名的文件，并编程如下，即可得到预期结果。</p><div class="code-wrapper"><pre><code class="hljs plaintext">├─ 会议.md└─ 会议　　 ├─ 20220114_社会调查.md　　 ├─ 20220514_常规组会.md　　 └─ 20220626_教育评议.md</code></pre></div><div class="code-wrapper"><pre><code class="hljs jsx">dv.<span class="hljs-title function_">table</span>(  <span class="hljs-comment">// 表头为 Date、Category、Title 三个字段</span>  [<span class="hljs-string">&quot;Date&quot;</span>, <span class="hljs-string">&quot;Category&quot;</span>, <span class="hljs-string">&quot;Title&quot;</span>],  dv    <span class="hljs-comment">// 在与当前文件同名的文件夹中查找结果</span>    .<span class="hljs-title function_">pages</span>(<span class="hljs-string">`&quot;<span class="hljs-subst">$&#123;dv.current().file.name&#125;</span>&quot;`</span>)    <span class="hljs-comment">// 结果按字母序顺序排序</span>    .<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">page</span>) =&gt;</span> page.<span class="hljs-property">file</span>.<span class="hljs-property">name</span>)    <span class="hljs-comment">// 对 page 进行操作来最终获得表头的三个字段</span>    .<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">page</span>) =&gt;</span> &#123;      <span class="hljs-keyword">const</span> fileName = page.<span class="hljs-property">file</span>.<span class="hljs-property">name</span>;      <span class="hljs-comment">// 匹配开头的日期, 格式必须是 20220305</span>      <span class="hljs-keyword">const</span> matchResult = fileName.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/(\d&#123;4&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)/</span>);      <span class="hljs-comment">// 自定义链接名, 使用 substring() 去掉文件名的日期部分</span>      <span class="hljs-keyword">const</span> updatedFileLink = dv.<span class="hljs-title function_">fileLink</span>(        page.<span class="hljs-property">file</span>.<span class="hljs-property">path</span>,        <span class="hljs-literal">false</span>,        fileName.<span class="hljs-title function_">substring</span>(<span class="hljs-number">9</span>)      );      <span class="hljs-keyword">return</span> [        <span class="hljs-comment">// Date: 使用 - 分割年月日</span>        <span class="hljs-string">`<span class="hljs-subst">$&#123;matchResult[<span class="hljs-number">1</span>]&#125;</span>-<span class="hljs-subst">$&#123;matchResult[<span class="hljs-number">2</span>]&#125;</span>-<span class="hljs-subst">$&#123;matchResult[<span class="hljs-number">3</span>]&#125;</span>`</span>,        <span class="hljs-comment">// Category: 每个文件中的 tag</span>        page.<span class="hljs-property">file</span>.<span class="hljs-property">tags</span>,        <span class="hljs-comment">// Title: 自定义链接名作为标题</span>        updatedFileLink,      ];    &#125;));</code></pre></div><h3 id="为-OJ-刷题记录编制索引"><a href="#为-OJ-刷题记录编制索引" class="headerlink" title="为 OJ 刷题记录编制索引"></a>为 OJ 刷题记录编制索引</h3><p>此例中，我们需要记录来自不同平台题目，需要根据 URL 提取平台信息，并显示当前文件的通过状态，例如 A 表示 Accept，N 表示 Not Started，W 表示 Wrong Answer。实现这样的功能需要在子目录的 markdown 头部添加 metadata 如下：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">URL:</span> <span class="hljs-string">https://leetcode.cn/problems/two-sum</span><span class="hljs-attr">Status:</span> <span class="hljs-string">A</span><span class="hljs-meta">---</span></code></pre></div><p>然后我们就可以使用 <code>page.status</code> 和 <code>page.url</code> 访问到这两个变量，并根据需要进行映射，得到最终结果。</p><div class="code-wrapper"><pre><code class="hljs jsx">dv.<span class="hljs-title function_">table</span>(  [<span class="hljs-string">&quot;Title&quot;</span>, <span class="hljs-string">&quot;Source&quot;</span>, <span class="hljs-string">&quot;Tags&quot;</span>, <span class="hljs-string">&quot;Status&quot;</span>],  dv    .<span class="hljs-title function_">pages</span>(<span class="hljs-string">`&quot;<span class="hljs-subst">$&#123;dv.current().file.folder&#125;</span>/<span class="hljs-subst">$&#123;dv.current().file.name&#125;</span>&quot;`</span>)    .<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">b</span>) =&gt;</span> [b.<span class="hljs-property">status</span>, b.<span class="hljs-property">tags</span>, b.<span class="hljs-property">title</span>])    .<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">b</span>) =&gt;</span> &#123;      <span class="hljs-keyword">let</span> result, source;      <span class="hljs-comment">// 用于映射 URL 中的关键字和 table 的 Source 字段</span>      <span class="hljs-keyword">const</span> sourceMap = &#123;        <span class="hljs-attr">leetcode</span>: <span class="hljs-string">&quot;LeetCode&quot;</span>,        <span class="hljs-attr">pintia</span>: <span class="hljs-string">&quot;PinTiA&quot;</span>,        <span class="hljs-attr">atcoder</span>: <span class="hljs-string">&quot;AtCoder&quot;</span>,        <span class="hljs-attr">luogu</span>: <span class="hljs-string">&quot;洛谷&quot;</span>,        <span class="hljs-attr">codeforce</span>: <span class="hljs-string">&quot;Codeforces&quot;</span>,        <span class="hljs-attr">nowcoder</span>: <span class="hljs-string">&quot;牛客&quot;</span>,      &#125;;      <span class="hljs-comment">// 用于将文件中的 A、N、W 映射为不同颜色的状态显示在表格中</span>      <span class="hljs-keyword">const</span> statusMap = &#123;        <span class="hljs-attr">A</span>: <span class="hljs-string">&quot;&lt;b&gt;&lt;font color=green&gt;Accept&lt;/font&gt;&lt;/b&gt;&quot;</span>,        <span class="hljs-attr">N</span>: <span class="hljs-string">&quot;&lt;b&gt;&lt;font color=grey&gt;Not Started&lt;/font&gt;&lt;/b&gt;&quot;</span>,        <span class="hljs-attr">W</span>: <span class="hljs-string">&quot;&lt;b&gt;&lt;font color=red&gt;Wrong Answer&lt;/font&gt;&lt;/b&gt;&quot;</span>,      &#125;;      <span class="hljs-keyword">if</span> (b.<span class="hljs-property">url</span>) &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> k <span class="hljs-keyword">in</span> sourceMap) &#123;          <span class="hljs-keyword">if</span> (~b.<span class="hljs-property">url</span>.<span class="hljs-title function_">indexOf</span>(k)) &#123;            source = sourceMap[k];            <span class="hljs-keyword">break</span>;          &#125;        &#125;      &#125; <span class="hljs-keyword">else</span> source = <span class="hljs-string">&quot;其他&quot;</span>;      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> k <span class="hljs-keyword">in</span> statusMap) &#123;        <span class="hljs-keyword">if</span> (k === b.<span class="hljs-property">status</span>) &#123;          result = statusMap[k];          <span class="hljs-keyword">break</span>;        &#125;      &#125;      <span class="hljs-comment">// 和表头的四个字段一一对应</span>      <span class="hljs-keyword">return</span> [b.<span class="hljs-property">file</span>.<span class="hljs-property">link</span>, source, b.<span class="hljs-property">file</span>.<span class="hljs-property">tags</span>, result];    &#125;));</code></pre></div><p>得到的结果如下：</p><p><img src="/hexo-blog/2022/12/31/Obsidian-DataviewJS-%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E5%AE%9E%E4%BE%8B/1678841002699.png"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://blacksmithgu.github.io/obsidian-dataview/">DataviewJS 文档</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Obsidian 是一个功能强大的笔记应用程序，越来越多的用户选择使用它来记录自己的思想、保存自己的笔记。它支持最近很火的双链功能，能在任意</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>WPD：阻止 Windows 收集个人信息的利器</title>
    <link href="https://schenga39.github.io/hexo-blog/2022/12/05/WPD%EF%BC%9A%E9%98%BB%E6%AD%A2-Windows-%E6%94%B6%E9%9B%86%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF%E7%9A%84%E5%88%A9%E5%99%A8/"/>
    <id>https://schenga39.github.io/hexo-blog/2022/12/05/WPD%EF%BC%9A%E9%98%BB%E6%AD%A2-Windows-%E6%94%B6%E9%9B%86%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF%E7%9A%84%E5%88%A9%E5%99%A8/</id>
    <published>2022-12-05T12:04:23.000Z</published>
    <updated>2025-07-24T07:27:31.324Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://wpd.app/">WPD</a> 是一款免费的 Windows 系统隐私设置工具，包含隐私管理、IP 拦截和 Appx 卸载等功能，通过调用系统自带 API 实现禁止相关隐私功能、阻止 Windows 遥测、关闭 Windows Defender 防火墙、阻止 Windows 更新等操作。</p><p>从 Windows 10 开始，操作系统对于个人数据的搜集能力大大加强。虽然微软保证不泄露个人信息，但是总让人不放心。如果你不想让微软得到这些数据，可以在系统设置、服务、组策略、注册表等中关闭，WPD 实现了多种隐私设置一处管理。其可以实现的功能有：禁用 UAC、Windows Defender、隐私设置、监控计划任务等；移除 Cortana、One Drive、遥测与数据搜集、遥测主服务、位置服务、Wi-Fi 共享、广告 ID、Defender 数据报告、数据共享、DRM 互联网访问、系统反馈请求、系统搜索、IE&#x2F;Edge 请勿跟踪等。下面介绍主要的设置方法并分享我自己的设置。</p><p><img src="/hexo-blog/2022/12/05/WPD%EF%BC%9A%E9%98%BB%E6%AD%A2-Windows-%E6%94%B6%E9%9B%86%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF%E7%9A%84%E5%88%A9%E5%99%A8/1670228218069.png"></p><p>软件主要分为 Privacy、Blocker 和 Apps 三个模块，主要用到前两个模块。</p><h2 id="Privacy"><a href="#Privacy" class="headerlink" title="Privacy"></a>Privacy</h2><p>首先打开 Privacy 模块，可根据自己的需要关闭对应的选项。对于会影响系统功能的选项在右边会有黄色的感叹号按钮，点击可查看会影响系统的哪些功能。例如 Services 中的 <strong>[连接设备平台用户服务]</strong> 会影响系统的 <strong>夜灯</strong> 功能，<strong>Windows Push Notifications User Service</strong> 会影响操作中心和网络设置。</p><p><img src="/hexo-blog/2022/12/05/WPD%EF%BC%9A%E9%98%BB%E6%AD%A2-Windows-%E6%94%B6%E9%9B%86%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF%E7%9A%84%E5%88%A9%E5%99%A8/1670228850059.png"></p><p>对于我来说，我保留了 <strong>Allow Clipboard History</strong>（使用剪切板历史，方便的小功能）和 <strong>Windows Push Notifications User Service</strong>。</p><p><img src="/hexo-blog/2022/12/05/WPD%EF%BC%9A%E9%98%BB%E6%AD%A2-Windows-%E6%94%B6%E9%9B%86%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF%E7%9A%84%E5%88%A9%E5%99%A8/1670229057887.png"></p><h2 id="Blocker"><a href="#Blocker" class="headerlink" title="Blocker"></a>Blocker</h2><p>来到第二个大项 Blocker，这里建议使用 Windows Filtering Platform 进行过滤，以下是 <a href="https://learn.microsoft.com/en-us/windows/win32/fwp/windows-filtering-platform-start-page">Microsoft 的描述</a>。</p><blockquote><p>Windows Filtering Platform (WFP) is a set of API and system services that provide a platform for creating network filtering applications. The WFP API allows developers to write code that interacts with the packet processing that takes place at several layers in the networking stack of the operating system.</p></blockquote><p>下面的三个规则为绿色则说明已开启屏蔽，分别对应着 <strong>Windows 遥测</strong>、<strong>第三方应用跟踪</strong> 和 <strong>阻止 Windows Update</strong>，推荐全部开启。</p><p><img src="/hexo-blog/2022/12/05/WPD%EF%BC%9A%E9%98%BB%E6%AD%A2-Windows-%E6%94%B6%E9%9B%86%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF%E7%9A%84%E5%88%A9%E5%99%A8/1670229454968.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://wpd.app/&quot;&gt;WPD&lt;/a&gt; 是一款免费的 Windows 系统隐私设置工具，包含隐私管理、IP 拦截和 Appx 卸载等功能，通过调用系统自带 API 实现禁止相关隐私功能、阻止 Windows 遥测、关闭 Windows Defe</summary>
      
    
    
    
    
    <category term="隐私保护" scheme="https://schenga39.github.io/hexo-blog/tags/%E9%9A%90%E7%A7%81%E4%BF%9D%E6%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>如何在互联网上保护自己的隐私</title>
    <link href="https://schenga39.github.io/hexo-blog/2022/11/22/%E5%A6%82%E4%BD%95%E5%9C%A8%E4%BA%92%E8%81%94%E7%BD%91%E4%B8%8A%E4%BF%9D%E6%8A%A4%E8%87%AA%E5%B7%B1%E7%9A%84%E9%9A%90%E7%A7%81/"/>
    <id>https://schenga39.github.io/hexo-blog/2022/11/22/%E5%A6%82%E4%BD%95%E5%9C%A8%E4%BA%92%E8%81%94%E7%BD%91%E4%B8%8A%E4%BF%9D%E6%8A%A4%E8%87%AA%E5%B7%B1%E7%9A%84%E9%9A%90%E7%A7%81/</id>
    <published>2022-11-22T16:00:00.000Z</published>
    <updated>2025-07-24T07:27:31.330Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>保护隐私是对人性自由和尊严的尊重，也是人类文明进步的一个重要标志。个人资讯隐私权的法律保护，既是我国宪法人权保障的现实需要，也是我国网络信息技术发展的必然要求。</p><p>在我们上网的过程中会接触到很多跟踪器(Tracker)，它们不断收集我们的行为动作，并最终将数据上传给一些科技公司。然后，这些公司就能利用我们的行为数据来实现更精准的推送或是更个性化的服务。诚然这为我们提供了很多便利，但一些过于隐私的数据也在无形当中被收集，这肯定不是件好事。</p><p>在国内的大环境下，某些毒瘤厂商借助自己的垄断地位，利用客户端软件肆无忌惮地窃取用户的个人信息，更有甚者直接在后台不断扫描用户的硬盘文件，还美其名曰安全检查……</p><p>为了应对以上问题给个人隐私带来的威胁，本文给出了保护个人隐私的基本方法，主要包含以下几个方面：</p><ul><li>IT 服务的选择</li><li>浏览器隐私问题</li><li>桌面软件隐私问题</li><li>Windows 操作系统隐私问题</li></ul><h2 id="IT-服务的选择"><a href="#IT-服务的选择" class="headerlink" title="IT 服务的选择"></a>IT 服务的选择</h2><p>对于 IT 服务的选择主要有以下几点原则：</p><ol><li>尽量选择<strong>纯 Web 服务</strong>而不要装软件。纯 Web 服务的操作能全部在浏览器中进行，收集隐私的能力有限；而装在电脑上的客户端收集隐私的能力和隐患明显大于前者。</li><li>尽量选择<strong>非盈利机构</strong>的软件和服务。例如 Mozilla 的 Firefox 浏览器优于谷歌的 Chrome 和微软的 Edge。</li><li>尽量选择<strong>绿色软件</strong>，能不联网就不联网使用。</li></ol><h2 id="浏览器隐私问题"><a href="#浏览器隐私问题" class="headerlink" title="浏览器隐私问题"></a>浏览器隐私问题</h2><h3 id="选择扩展而不是插件"><a href="#选择扩展而不是插件" class="headerlink" title="选择扩展而不是插件"></a>选择扩展而不是插件</h3><p>现代浏览器大多具有插件和扩展安装功能，二者有些许不同：</p><ul><li>插件可操作系统本地代码、调用系统 API</li><li>扩展可调用浏览器 API，但是通常不能调用操作系统 API<br>很明显，扩展对于插件来说更有利于保护我们的隐私，防止滥用。</li></ul><h3 id="禁用浏览器的第三方-Cookie"><a href="#禁用浏览器的第三方-Cookie" class="headerlink" title="禁用浏览器的第三方 Cookie"></a>禁用浏览器的第三方 Cookie</h3><p>Cookie 是浏览器常用的存储小量信息到本地的一种方式，能允许网站在本地以键值对的方式存储一些数据。而 Cookie 可分为第一方 Cookie 和第三方 Cookie。二者是一对相对概念，在存储形态上一致。所谓第一方 Cookie 便是你所正在浏览的域所建立的 Cookie。如果你正在访问谷歌的官网 google.com，那么浏览器会生成一些 google.com 域的 Cookie 保存起来，这就是第一方 Cookie。其他不属于 google.com 域的 Cookie 此时可看作第三方 Cookie。</p><p>第三方 Cookie 可帮助第三方标记用户，常常被用于根据用户的喜好定向投放广告等跟踪用途。下面以 Firefox 浏览器为例说明禁用第三方 Cookie 的操作步骤，其他现代浏览器大同小异：</p><ul><li>进入设置界面</li><li>点击左侧的 <strong>[隐私与安全]</strong> 选项卡</li><li>找到增强型跟踪保护模块，选择 <strong>[自定义]</strong> 并在 Cookie 中选择 <strong>[所有第三方 Cookie]</strong><br><img src="/hexo-blog/2022/11/22/%E5%A6%82%E4%BD%95%E5%9C%A8%E4%BA%92%E8%81%94%E7%BD%91%E4%B8%8A%E4%BF%9D%E6%8A%A4%E8%87%AA%E5%B7%B1%E7%9A%84%E9%9A%90%E7%A7%81/1669252954100.png"></li></ul><h2 id="桌面软件隐私问题"><a href="#桌面软件隐私问题" class="headerlink" title="桌面软件隐私问题"></a>桌面软件隐私问题</h2><p>这里主要讲讲怎么应对腾讯 QQ 在后台不断扫描硬盘文件。分为简单操作、中等操作、复杂操作三种。</p><h3 id="简单操作"><a href="#简单操作" class="headerlink" title="简单操作"></a>简单操作</h3><p>打开资源管理器，进入 <code>%AppData%\Tencent</code> 目录下，如果你使用的是 QQ 则进入 QQ 子文件夹下，如果使用的 TIM 就进入 TIM 文件夹。进入到相应的目录后可以看到该目录下有一个 SafeBase 文件夹，将其改名或删除，然后新建一个无后缀的文件，命名为 SafeBase，并将其属性改为只读。</p><p><img src="/hexo-blog/2022/11/22/%E5%A6%82%E4%BD%95%E5%9C%A8%E4%BA%92%E8%81%94%E7%BD%91%E4%B8%8A%E4%BF%9D%E6%8A%A4%E8%87%AA%E5%B7%B1%E7%9A%84%E9%9A%90%E7%A7%81/1669252963550.png"></p><h3 id="中等操作：使用沙盒软件隔离运行"><a href="#中等操作：使用沙盒软件隔离运行" class="headerlink" title="中等操作：使用沙盒软件隔离运行"></a>中等操作：使用沙盒软件隔离运行</h3><p>这里使用软件 Sandboxie-Plus 对 QQ 进行隔离。操作步骤如下：</p><ol><li><p>安装沙盒软件软件 <a href="https://sandboxie-plus.com/">Sandboxie-Plus</a> 并在官网下载 QQ 或 TIM 安装包</p></li><li><p>将安装包拖入沙盒中并安装</p></li><li><p>安装完成后右键沙盒，点击沙盒选项，选择左边的资源访问，并添加以下几个路径，也可以添加其他自己不想让 QQ 访问到的文件路径</p><p><img src="/hexo-blog/2022/11/22/%E5%A6%82%E4%BD%95%E5%9C%A8%E4%BA%92%E8%81%94%E7%BD%91%E4%B8%8A%E4%BF%9D%E6%8A%A4%E8%87%AA%E5%B7%B1%E7%9A%84%E9%9A%90%E7%A7%81/1669252967996.png"></p></li></ol><p>由于是在沙盒中运行，每次启动 QQ 前都要先打开沙盒软件有点麻烦。可在桌面创建批处理文件，并在其中输入以下命令</p><ul><li><p>TIM</p><div class="code-wrapper"><pre><code class="hljs bash">@<span class="hljs-built_in">echo</span> off<span class="hljs-string">&quot;沙盒安装路径\Sandboxie-Plus\Start.exe&quot;</span> /box:沙盒名称 <span class="hljs-string">&quot;C:\Program Files (x86)\Common Files\Tencent\QQProtect\Bin\QQProtect.exe&quot;</span><span class="hljs-string">&quot;沙盒安装路径\Sandboxie-Plus\Start.exe&quot;</span> /box:沙盒名称 <span class="hljs-string">&quot;C:\Program Files (x86)\Tencent\TIM\Bin\TIM.exe&quot;</span></code></pre></div></li><li><p>QQ</p><div class="code-wrapper"><pre><code class="hljs bash">@<span class="hljs-built_in">echo</span> off<span class="hljs-string">&quot;沙盒安装路径\Sandboxie-Plus\Start.exe&quot;</span> /box:沙盒名称 <span class="hljs-string">&quot;C:\Program Files (x86)\Common Files\Tencent\QQProtect\Bin\QQProtect.exe&quot;</span><span class="hljs-string">&quot;沙盒安装路径\Sandboxie-Plus\Start.exe&quot;</span> /box:沙盒名称 <span class="hljs-string">&quot;C:\Program Files (x86)\Tencent\QQ\Bin\QQ.exe&quot;</span></code></pre></div></li></ul><h3 id="复杂操作：使用虚拟机"><a href="#复杂操作：使用虚拟机" class="headerlink" title="复杂操作：使用虚拟机"></a>复杂操作：使用虚拟机</h3><p>可以安装 VMware Workstation Pro 或 Oracle VM VirtualBox，在其中安装操作系统后安装 QQ。这样做保护性最好但非常麻烦。</p><h3 id="另辟蹊径：使用第三方-QQ-客户端"><a href="#另辟蹊径：使用第三方-QQ-客户端" class="headerlink" title="另辟蹊径：使用第三方 QQ 客户端"></a>另辟蹊径：使用第三方 QQ 客户端</h3><p>这里主要推荐 <a href="https://github.com/Icalingua-plus-plus/Icalingua-plus-plus">Icalingua++</a>，支持防撤回、本地表情包管理等官方客户端不具有的功能，和 QQ 服务器间使用 oicq 协议通信。美中不足是使用了 Electron 框架，对内存占用相对于官方客户端来说更大。</p><h2 id="Windows-操作系统隐私问题"><a href="#Windows-操作系统隐私问题" class="headerlink" title="Windows 操作系统隐私问题"></a>Windows 操作系统隐私问题</h2><p>Windows 是目前市场份额占有率最大的操作系统，但是在安装完操作系统后，很多微软用于收集用户隐私的选项都被默认启用。可以通过 <a href="https://wpd.app/">WPD</a> 软件来解决该问题。详细操作可参考 <a href="https://blog.schenga.ga/post/shi-yong-wpd-zu-zhi-windows-shou-ji-ge-ren-xin-xi">这篇文章</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;保护隐私是对人性自由和尊严的尊重，也是人类文明进步的一个重要标志。个人资讯隐私权的法律保护，既是我国宪法人权保障的现实需要，也是我国网络信息</summary>
      
    
    
    
    
    <category term="隐私保护" scheme="https://schenga39.github.io/hexo-blog/tags/%E9%9A%90%E7%A7%81%E4%BF%9D%E6%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>复变函数知识点</title>
    <link href="https://schenga39.github.io/hexo-blog/2022/11/21/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://schenga39.github.io/hexo-blog/2022/11/21/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2022-11-21T16:00:00.000Z</published>
    <updated>2025-07-24T07:27:31.330Z</updated>
    
    <content type="html"><![CDATA[<h2 id="复数函数与解析函数"><a href="#复数函数与解析函数" class="headerlink" title="复数函数与解析函数"></a>复数函数与解析函数</h2><ol><li>复数开方根：$\omega&#x3D;z^{\frac{1}{n}}&#x3D;r^{\frac{1}{n}}(\cos\frac{\theta+2k\pi}{n}+i\sin\frac{\theta+2k\pi}{n})$，其中 $k&#x3D;0,1,2,\cdots ,n-1$</li><li>函数 $f(z)&#x3D;u(x,y)+iv(x,y)$ 解析的充要条件：u 和 v 可导且在 (x,y) 满足柯西黎曼方程（判断解析时注意判断是否形成区域）<br>$$<br>\begin{cases}\frac{\partial u}{\partial x}&#x3D;\frac{\partial v}{\partial y}\ \frac{\partial u}{\partial y}&#x3D;-\frac{\partial v}{\partial x}\end{cases}<br>$$</li><li>对复变函数 $f(z)&#x3D;u+iv$ 求导得 $f^\prime(z)&#x3D;\frac{\partial u}{\partial x}+i\frac{\partial v}{\partial x}$</li><li>初等复变函数<ul><li>指数函数 $e^z&#x3D;e^x(\cos y+i\sin y)$，其中 $z&#x3D;x+iy$</li><li>对数函数 $Lnz&#x3D;lnz+2k\pi i$，其中 $lnz&#x3D;ln|z|+iArgz$ 称为主值</li><li>幂函数 $a^b&#x3D;e^{bLna}$，注意是 $Ln$ 不是 $ln$</li><li>三角函数 $\cos z&#x3D;\frac{e^{iz}+e^{-iz}}{2},\sin z&#x3D;\frac{e^{iz}-e^{-iz}}{2i}$</li></ul></li><li>除去原点和实负半轴，在复平面内其他点 $lnz$ 处处连续</li><li>解方程注意是 $Ln$ 不是 $ln$</li><li>复数的导数定义：$lim_{\Delta z\to 0}\frac{f(z+\Delta z)-f(z)}{\Delta z}$</li></ol><h2 id="复变函数的积分"><a href="#复变函数的积分" class="headerlink" title="复变函数的积分"></a>复变函数的积分</h2><ol><li>如果闭合曲线不包含奇点则沿闭合曲线积分为零</li><li>如果闭合曲线包含一个奇点则积分为 $2\pi i$</li><li>求原函数注意函数必须解析</li><li>柯西积分公式：$\oint_C\frac{f(z)}{z-z_0}&#x3D;2\pi if(z_0)$，其中 $z_0$ 为不解析点（一级极点）</li><li>高阶导数公式：$f^{(n)}(z_0)&#x3D;\frac{n!}{2\pi i}\oint \frac{f(z)}{(z-z_0)^{n+1}}dz,n&#x3D;1,2,\cdots$</li><li>调和函数 $\varphi(x,y)$ 满足 $\frac{\partial^2\varphi}{\partial x^2}+\frac{\partial^2\varphi}{\partial y^2}&#x3D;0$</li><li>求解析函数利用柯西古萨定理的两个等式</li></ol><h2 id="级数"><a href="#级数" class="headerlink" title="级数"></a>级数</h2><ol><li>收敛半径：在内部绝对收敛，在外部发散</li><li>求收敛半径：先求 z 的系数 $c_n$<ul><li>若 $\lim_{n\to \infty}|\frac{c_{n+1}}{c_n}|&#x3D;\lambda\neq 0$ 则收敛半径 $R&#x3D;\frac{1}{\lambda}$</li><li>若 $\lim_{n\to \infty}|c_n|^{\frac{1}{n}}&#x3D;\mu \neq 0$ 则收敛半径 $R&#x3D;\frac{1}{\mu}$</li></ul></li><li>常用级数公式：$\frac{1}{1-z}&#x3D;1+z+z^2+\cdots +z^n+\cdots$，其中 $|z|&lt;1$</li><li>泰勒级数：$f(z)&#x3D;\sum_{n&#x3D;0}^{\infty}\frac{f^{(n)}(z_0)}{n!}(z-z_0)^n$，将泰勒级数的系数提出来，即 $c_n&#x3D;\frac{f^{(n)}(z_0)}{n!},n&#x3D;0,1,2,\cdots$</li><li>正弦和余弦泰勒展开公式</li><li>洛朗级数：$f(z)&#x3D;\sum_{n&#x3D;-\infty}^{\infty}c_n(z-z_0)^n$，其中 $c_n&#x3D;\frac{1}{2\pi i}\oint_C\frac{f(\xi)}{(\xi -z_0)^{n+1}}d\xi,n&#x3D;0,\pm 1,\pm 2,\cdots$</li><li>使用级数求积分首选间接展开：$c_{-1}\cdot 2\pi i&#x3D;\oint_Cf(\xi)d\xi$</li><li>收敛半径是离圆心最近的不收敛点到圆心的距离</li><li><strong>展开成洛朗级数时的分情况讨论</strong></li><li>m 级零点：求导 m 次后不为零</li></ol><h2 id="留数"><a href="#留数" class="headerlink" title="留数"></a>留数</h2><ol><li>留数 $Res[f(z),z_0]&#x3D;\frac{1}{2\pi i}\oint_Cf(z)dz&#x3D;c_{-1}$</li><li>留数计算<ul><li>若 $z_0$ 为一级零点则 $Res[f(z),z_0]&#x3D;\lim_{z\to z_0}(z-z_0)f(z)$</li><li>若 $z_0$ 为 m 级零点则 $Res[f(z),z_0]&#x3D;\frac{1}{(m-1)!}\lim_{z\to z_0}\frac{d^{m-1}}{dz^{m-1}}{(z-z_0)^mf(z)}$</li><li>若 $f(z)&#x3D;\frac{P(z)}{Q(z)}$ 且 $P(z_0)\neq 0,Q(z_0)&#x3D;0,Q^\prime (z_0)\neq 0$ 则 $Res[f(z),z_0]&#x3D;\frac{P(z_0)}{Q^\prime (z_0)}$</li><li>$Res[f(z),\infty]&#x3D;-Res[f(\frac{1}{z})\cdot \frac{1}{z^2},0]$</li><li>在扩充复平面内所有极点<strong>留数和为零</strong></li></ul></li><li>几种特殊的留数积分<ul><li>形如 $\int_0^{2\pi}R(\cos \theta,\sin \theta)d\theta$ 的积分：令 $z&#x3D;e^{i\theta}$，则 $d\theta&#x3D;\frac{dz}{iz},\sin \theta&#x3D;\frac{z^2-1}{2iz},\cos \theta&#x3D;\frac{z^2+1}{2z}$，将积分化为沿正向单位圆轴的积分，积分值为 $2\pi i\sum_{k&#x3D;1}^{n}Res[f(z),z_k]$</li><li>形如 $\int_{-\infty} ^\infty R(x)dx$ 的积分：若分母次数至少比分子高两次，则 $\int_{-\infty} ^\infty R(x)dx&#x3D;2\pi i\sum Res[R(z),z_k]$ 即上方奇点留数和的 $2\pi i$ 倍</li><li>形如 $\int_{-\infty} ^\infty R(x)e^{aix}dx$ 的积分：若分母次数至少比分子高一次则 $\int_{-\infty} ^\infty R(x)e^{aix}dx&#x3D;2\pi i\sum Res[R(z)e^{aiz},z_k]$</li></ul></li><li>利用留数求积分：先计算留数然后乘以 $2\pi i$ 即为积分值</li></ol><h2 id="Fourier-变换"><a href="#Fourier-变换" class="headerlink" title="Fourier 变换"></a>Fourier 变换</h2><ol><li>$\int_{-\infty}^{+\infty}\delta(t-t_0)f(t)dt&#x3D;f(t_0)$</li><li>Fourier 积分公式<ul><li>正弦：$f(t)&#x3D;\frac{2}{\pi}\int_0^{+\infty}[\int_0^{+\infty}f(\tau)\sin \omega \tau d\tau]\sin \omega td\omega$，适用于奇函数</li><li>余弦：$f(t)&#x3D;\frac{2}{\pi}\int_0^{+\infty}[\int_0^{+\infty}f(\tau)\cos \omega \tau d\tau]\cos \omega td\omega$，适用于偶函数</li></ul></li><li>用定义计算 Fourier 变换可以先将复数转换为三角形式</li><li>Dirichlet 积分：$\int_0^{+\infty}\frac{\sin \omega}{\omega}d\omega&#x3D;\frac{\pi}{2}$</li><li>Fourier 变换：$\mathscr{F}[f(t)]&#x3D;F(\omega)&#x3D;\int_{-\infty}^{+\infty}f(t)e^{-j\omega t}dt$</li><li>正弦变换 $F_s(\omega)&#x3D;\int_0^{+\infty}f(t)\sin \omega tdt$，余弦变换 $F_c(\omega)&#x3D;\int_0^{+\infty}f(t)\cos \omega tdt$</li><li>单位脉冲函数 $\delta(t)$ 与任何函数相乘只留下 $[0,\epsilon]$ 的部分</li><li>常用性质<ul><li>$\int_{-\infty}^{+\infty}\delta(t)dt&#x3D;1$</li><li>$\mathscr{F}[\delta (t)]&#x3D;1,\mathscr{F}^{-1}[1]&#x3D;\delta (t)$</li><li>$\mathscr{F}[\delta (t-t_0)]&#x3D;e^{-j\omega t_0},\mathscr{F}^{-1}[e^{-j\omega t_0}]&#x3D;\delta (t-t_0)$</li><li>$\mathscr{F}[1]&#x3D;2\pi \delta (\omega),\mathscr{F}^{-1}[2\pi \delta(\omega)]&#x3D;1$</li><li>$\mathscr{F}[e^{j\omega_0t}]&#x3D;2\pi \delta(\omega-\omega_0),\mathscr{F}^{-1}[2\pi \delta(\omega-\omega_0)]&#x3D;e^{j\omega_0t}$</li><li>$\mathscr{F}[f(t\pm t_0)]&#x3D;e^{\pm j\omega t_0}\mathscr{F}[f(t)]$</li><li>$\mathscr{F}[f^\prime(t)]&#x3D;j\omega \mathscr{F}[f(t)]$</li><li>$\mathscr{F}[\int_{-\infty}^tf(t)dt]&#x3D;\frac{1}{j\omega}\mathscr{F}[f(t)]$</li><li>若 $f(t)$ 无穷次可微则 $\int_{-\infty}^{+\infty}\delta(t-t_0)f(t)dt&#x3D;f(t_0)$</li></ul></li><li>$u(t)$ 为单位阶跃函数，在虚轴左边等于零，在右边等于 1</li><li>卷积：$\int_{-\infty}^{+\infty}f_1(\tau)f_2(t-\tau)d\tau&#x3D;f_1(t)*f_2(t)$</li><li>卷积的性质：$\mathscr{F}[f_1(t)\cdot f_2(t)]&#x3D;\frac{1}{2\pi}F_1(\omega)*F_2(\omega)$</li><li>分部积分放入 d 后的优先顺序：反对幂三指</li></ol><h2 id="Laplace-变换"><a href="#Laplace-变换" class="headerlink" title="Laplace 变换"></a>Laplace 变换</h2><ol><li>Laplace 变换：$\mathscr{L}[f(t)]&#x3D;F(s)&#x3D;\int_0^{+\infty}f(t)e^{-st}dt$</li><li>注意需要给出收敛范围（积分存在的条件，一般是 $Re(s)&gt;0$）</li><li>Laplace 变换性质<ul><li>$\mathscr{L}[f^\prime(t)]&#x3D;sF(s)-f(0)$</li><li>$\mathscr{L}[f^{\prime \prime}(t)]&#x3D;s^2F(s)-sf(0)-f^\prime(0)$</li><li>$\mathscr{L}[\int_0^tf(t)dt]&#x3D;\frac{1}{s}F(s)$</li><li>$\mathscr{L}[e^{at}f(t)]&#x3D;F(s-a),Re(s-a)&gt;c$</li><li>$\mathscr{L}[f(t-\tau)]&#x3D;e^{-s\tau}F(s)$</li><li>$\mathscr{L}[\delta(t)]&#x3D;1$</li><li>$\mathscr{L}[e^{kt}]&#x3D;\frac{1}{s-k}$</li><li>$\mathscr{L}[t^2]&#x3D;\frac{2}{s^3}$</li><li>$\mathscr{L}[\sin kt]&#x3D;\frac{k}{s^2+k^2}$</li><li>$\mathscr{L}[te^t]&#x3D;\frac{1}{(s-1)^2}$</li></ul></li><li>卷积：$f_1(t)*f_2(t)&#x3D;\int_0^tf_1(\tau)f_2(t-\tau)d\tau$</li><li>求卷积常用公式：$f_1(t)\ast f_2(t)&#x3D;\mathscr{L}^{-1}{\mathscr{L}[f_1(t)\ast f_2(t)]}&#x3D;\mathscr{L}^{-1}[F_1(s)\cdot F_2{(s)}]$</li><li>Laplace 逆变换：$f(t)&#x3D;\sum_{k&#x3D;1}^nRes_{s&#x3D;s_k}[F(s)e^{st}],t&gt;0$，直观方法为将使分母为零的 s 分别带入 $F(s)e^{st}$ 再求和</li><li>$\frac{1}{a^2b}$ 分解因式后有三项：$\frac 1a$、$\frac 1b$ 和 $\frac{1}{a^2}$，可用待定系数法分解因式</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;复数函数与解析函数&quot;&gt;&lt;a href=&quot;#复数函数与解析函数&quot; class=&quot;headerlink&quot; title=&quot;复数函数与解析函数&quot;&gt;&lt;/a&gt;复数函数与解析函数&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;复数开方根：$&#92;omega&amp;#x3D;z^{&#92;frac{1}{n}}&amp;#</summary>
      
    
    
    
    
  </entry>
  
</feed>
